
Proyecto 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000006ec  00000780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  00000784  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a24  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000796  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d2  00000000  00000000  00001a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00002030  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000461  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  000025e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  9e:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <INIT_TIMER2>:
}

void INIT_TIMER2(){
	

	DDRB |= (1 << DDB3);	//Setear bit 3 del puerto B como salida
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD3);	//Setear bit 3 del puerto D como salida
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	8a b9       	out	0x0a, r24	; 10
		
	//CONFIGURACIÓN DEL TIMER 2 PARA FAST PWM CON OCR1A COMO TOP
	TCCR2A = 0;
  b2:	e0 eb       	ldi	r30, 0xB0	; 176
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	TCCR2A |= (1 << COM2A1);	//no invertido para la salida 2A
  b8:	80 81       	ld	r24, Z
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2B1);	//no invertido para la salida 2B
  be:	80 81       	ld	r24, Z
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	80 83       	st	Z, r24
		
		
	//Modo fast PMW (MODO 3)
	TCCR2A |= (1 << WGM21)|(1 << WGM20);
  c4:	80 81       	ld	r24, Z
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	80 83       	st	Z, r24
	TCCR2B = 0;
  ca:	e1 eb       	ldi	r30, 0xB1	; 177
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
	TCCR2B |= (1<<CS22)|(1<<CS20);	//Prescaler de 128
  d0:	80 81       	ld	r24, Z
  d2:	85 60       	ori	r24, 0x05	; 5
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <updateDutyCycle2A>:
	
		
}

void  updateDutyCycle2A(uint8_t duty){
	OCR2A = duty;
  d8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  dc:	08 95       	ret

000000de <updateDutyCycle2b>:
}

void  updateDutyCycle2b(uint8_t duty){
	OCR2B = duty;
  de:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  e2:	08 95       	ret

000000e4 <INIT_PIN_CHANGE>:
}

void INIT_PIN_CHANGE()
{//Habilitar interrupciones de pin change
	PCICR |= (1 << PCIE1);     // Habilitar interrupción de cambio de estado
  e4:	e8 e6       	ldi	r30, 0x68	; 104
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);  // Habilita interrupción para PORTC3 (bit 3 de Puerto C)
  ee:	ec e6       	ldi	r30, 0x6C	; 108
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 60       	ori	r24, 0x08	; 8
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <initUART>:
}

void initUART(){
	//Configurar pines PD0 (TX) y PD1 (TX)
	DDRD |= (1<<DDD1);
  fa:	8a b1       	in	r24, 0x0a	; 10
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<DDD0);
 100:	8a b1       	in	r24, 0x0a	; 10
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	8a b9       	out	0x0a, r24	; 10
	
	//Configurar UCSR0A
	UCSR0A=0;
 106:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//Configuración UCSR0B: Habililitndo la interrupción al escribir:
	//-Habilibitar recepción
	//-Habilitación de transmisión
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)| (1<< TXEN0);
 10a:	e1 ec       	ldi	r30, 0xC1	; 193
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	88 69       	ori	r24, 0x98	; 152
 112:	80 83       	st	Z, r24
	//Configurar UCSR0C
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 114:	e2 ec       	ldi	r30, 0xC2	; 194
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	86 60       	ori	r24, 0x06	; 6
 11c:	80 83       	st	Z, r24
	//Configurar UBRR0: UBRR0 = 103 -> 9600  @ 16MHz
	UBRR0 = 103;
 11e:	87 e6       	ldi	r24, 0x67	; 103
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 126:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 12a:	08 95       	ret

0000012c <INIT_ADC>:
}


void INIT_ADC(){
	ADMUX = 0;	//Apagar todo
 12c:	ec e7       	ldi	r30, 0x7C	; 124
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	10 82       	st	Z, r1
	
	//Voltaje de referencia 5V
	ADMUX |=(1<<REFS0);
 132:	80 81       	ld	r24, Z
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); //orientación (izquierda)
 138:	80 81       	ld	r24, Z
 13a:	80 62       	ori	r24, 0x20	; 32
 13c:	80 83       	st	Z, r24
	ADCSRA = 0;	//Apagar todo
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	10 82       	st	Z, r1
	ADCSRA |=(1<<ADPS1)	| (1 << ADPS0); //Configuración del presacaler 8
 144:	80 81       	ld	r24, Z
 146:	83 60       	ori	r24, 0x03	; 3
 148:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//Habilitación de interrupciones
 14a:	80 81       	ld	r24, Z
 14c:	88 60       	ori	r24, 0x08	; 8
 14e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	//Habilitar ADS
 150:	80 81       	ld	r24, Z
 152:	80 68       	ori	r24, 0x80	; 128
 154:	80 83       	st	Z, r24
 156:	08 95       	ret

00000158 <setup>:
		
	}
}

void setup(){
	cli();	//Desabilitar interrupciones
 158:	f8 94       	cli
	INIT_TIMER2();
 15a:	0e 94 53 00 	call	0xa6	; 0xa6 <INIT_TIMER2>
	INIT_ADC();
 15e:	0e 94 96 00 	call	0x12c	; 0x12c <INIT_ADC>
	initPWM1A();
 162:	0e 94 ad 01 	call	0x35a	; 0x35a <initPWM1A>
	initPWM1B();
 166:	0e 94 ce 01 	call	0x39c	; 0x39c <initPWM1B>
	
	INIT_PIN_CHANGE();
 16a:	0e 94 72 00 	call	0xe4	; 0xe4 <INIT_PIN_CHANGE>
	initUART();
 16e:	0e 94 7d 00 	call	0xfa	; 0xfa <initUART>
	

	//Configurar los puertos de salida (LEDS)
	DDRB |= (1 << PORTB0);
 172:	84 b1       	in	r24, 0x04	; 4
 174:	81 60       	ori	r24, 0x01	; 1
 176:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<< PORTB4);
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	8f 7e       	andi	r24, 0xEF	; 239
 17c:	85 b9       	out	0x05, r24	; 5
	DDRD |= (1 << PORTD7)|(1 << PORTD6);
 17e:	8a b1       	in	r24, 0x0a	; 10
 180:	80 6c       	ori	r24, 0xC0	; 192
 182:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << PORTD7)|(PORTD6));
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	89 77       	andi	r24, 0x79	; 121
 188:	8b b9       	out	0x0b, r24	; 11
	//Configurar el bit 3 del puerto C como entrada
	PORTC &= ~(1 << PORTC3);
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	87 7f       	andi	r24, 0xF7	; 247
 18e:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC3);		//Pull up activado
 190:	88 b1       	in	r24, 0x08	; 8
 192:	88 60       	ori	r24, 0x08	; 8
 194:	88 b9       	out	0x08, r24	; 8
	
	CLKPR = (1 << CLKPCE); //Habilita cambios de prescaler
 196:	e1 e6       	ldi	r30, 0x61	; 97
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 e8       	ldi	r24, 0x80	; 128
 19c:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2);	// 1MHz
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	80 83       	st	Z, r24
	sei();		//Habilita cambios de interrupción
 1a2:	78 94       	sei
	
	ADCSRA |= (1 << ADSC); // Iniciar primera conversión
 1a4:	ea e7       	ldi	r30, 0x7A	; 122
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	80 83       	st	Z, r24
 1ae:	08 95       	ret

000001b0 <main>:
void INIT_PIN_CHANGE();


int main(void)
{
	setup();
 1b0:	0e 94 ac 00 	call	0x158	; 0x158 <setup>
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <main+0x4>

000001b6 <__vector_21>:
}

/*************VECTOR DE INTERRUPCIÓN************/

ISR(ADC_vect)
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	POT++;
 1d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <POT>
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <POT>
	
	switch (POT){
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <__vector_21+0x32>
 1e6:	57 c0       	rjmp	.+174    	; 0x296 <__vector_21+0xe0>
 1e8:	28 f4       	brcc	.+10     	; 0x1f4 <__vector_21+0x3e>
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	51 f0       	breq	.+20     	; 0x202 <__vector_21+0x4c>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	69 f1       	breq	.+90     	; 0x24c <__vector_21+0x96>
 1f2:	9d c0       	rjmp	.+314    	; 0x32e <__vector_21+0x178>
 1f4:	84 30       	cpi	r24, 0x04	; 4
 1f6:	09 f4       	brne	.+2      	; 0x1fa <__vector_21+0x44>
 1f8:	73 c0       	rjmp	.+230    	; 0x2e0 <__vector_21+0x12a>
 1fa:	85 30       	cpi	r24, 0x05	; 5
 1fc:	09 f4       	brne	.+2      	; 0x200 <__vector_21+0x4a>
 1fe:	95 c0       	rjmp	.+298    	; 0x32a <__vector_21+0x174>
 200:	96 c0       	rjmp	.+300    	; 0x32e <__vector_21+0x178>
		case 1:
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));  // Limpiar bit
 202:	ec e7       	ldi	r30, 0x7C	; 124
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	88 7f       	andi	r24, 0xF8	; 248
 20a:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX2) | (1<<MUX1);//Selección de canal Bit 6 del puerto C
 20c:	80 81       	ld	r24, Z
 20e:	86 60       	ori	r24, 0x06	; 6
 210:	80 83       	st	Z, r24
			ADC1=ADCH;
 212:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 216:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <ADC1>
			dutyCycle1 = (ADC1 * (188.0 / 255.0)) + 69.0;
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
 224:	2d eb       	ldi	r18, 0xBD	; 189
 226:	3c eb       	ldi	r19, 0xBC	; 188
 228:	4c e3       	ldi	r20, 0x3C	; 60
 22a:	5f e3       	ldi	r21, 0x3F	; 63
 22c:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	4a e8       	ldi	r20, 0x8A	; 138
 236:	52 e4       	ldi	r21, 0x42	; 66
 238:	0e 94 de 01 	call	0x3bc	; 0x3bc <__addsf3>
 23c:	0e 94 4a 02 	call	0x494	; 0x494 <__fixunssfsi>
 240:	86 2f       	mov	r24, r22
 242:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <dutyCycle1>
			updateDutyCycle1(dutyCycle1); // Actualizar PWM
 246:	0e 94 c8 01 	call	0x390	; 0x390 <updateDutyCycle1>
			break;
 24a:	71 c0       	rjmp	.+226    	; 0x32e <__vector_21+0x178>
		
		case 2:
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));  // Limpiar bit
 24c:	ec e7       	ldi	r30, 0x7C	; 124
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	88 7f       	andi	r24, 0xF8	; 248
 254:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Selección de canal Bit 7 del puerto C
 256:	80 81       	ld	r24, Z
 258:	87 60       	ori	r24, 0x07	; 7
 25a:	80 83       	st	Z, r24
			ADC2=ADCH;
 25c:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 260:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <ADC2>
			dutyCycle2 = (ADC2 *  (188.0 / 255.0)) + 69.0;
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
 26e:	2d eb       	ldi	r18, 0xBD	; 189
 270:	3c eb       	ldi	r19, 0xBC	; 188
 272:	4c e3       	ldi	r20, 0x3C	; 60
 274:	5f e3       	ldi	r21, 0x3F	; 63
 276:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	4a e8       	ldi	r20, 0x8A	; 138
 280:	52 e4       	ldi	r21, 0x42	; 66
 282:	0e 94 de 01 	call	0x3bc	; 0x3bc <__addsf3>
 286:	0e 94 4a 02 	call	0x494	; 0x494 <__fixunssfsi>
 28a:	86 2f       	mov	r24, r22
 28c:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <dutyCycle2>
			updateDutyCycle1B(dutyCycle2); // Actualizar PWM
 290:	0e 94 d7 01 	call	0x3ae	; 0x3ae <updateDutyCycle1B>
			break;
 294:	4c c0       	rjmp	.+152    	; 0x32e <__vector_21+0x178>
		
		case 3:
		
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));  // Limpiar bit MUX0 primero
 296:	ec e7       	ldi	r30, 0x7C	; 124
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	88 7f       	andi	r24, 0xF8	; 248
 29e:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX2) | (1<<MUX0);//Selección de canal Bit 5 del puerto C
 2a0:	80 81       	ld	r24, Z
 2a2:	85 60       	ori	r24, 0x05	; 5
 2a4:	80 83       	st	Z, r24
			ADC3=ADCH;
 2a6:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2aa:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <ADC3>
			dutyCycle3 = (ADC3 * (24.0 / 255.0)) + 2.0;
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
 2b8:	21 ec       	ldi	r18, 0xC1	; 193
 2ba:	30 ec       	ldi	r19, 0xC0	; 192
 2bc:	40 ec       	ldi	r20, 0xC0	; 192
 2be:	5d e3       	ldi	r21, 0x3D	; 61
 2c0:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	50 e4       	ldi	r21, 0x40	; 64
 2cc:	0e 94 de 01 	call	0x3bc	; 0x3bc <__addsf3>
 2d0:	0e 94 4a 02 	call	0x494	; 0x494 <__fixunssfsi>
 2d4:	86 2f       	mov	r24, r22
 2d6:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <dutyCycle3>
			updateDutyCycle2A(dutyCycle3); // Actualizar PWM
 2da:	0e 94 6c 00 	call	0xd8	; 0xd8 <updateDutyCycle2A>
			break;
 2de:	27 c0       	rjmp	.+78     	; 0x32e <__vector_21+0x178>
		
		case 4:
		
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));  // Limpiar bit MUX0 primero
 2e0:	ec e7       	ldi	r30, 0x7C	; 124
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	88 7f       	andi	r24, 0xF8	; 248
 2e8:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX2);//Selección de canal Bit 4 del puerto C
 2ea:	80 81       	ld	r24, Z
 2ec:	84 60       	ori	r24, 0x04	; 4
 2ee:	80 83       	st	Z, r24
			ADC4=ADCH;
 2f0:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2f4:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
			dutyCycle4 = (ADC4 * (24.0 / 255.0)) + 2.0;
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
 302:	21 ec       	ldi	r18, 0xC1	; 193
 304:	30 ec       	ldi	r19, 0xC0	; 192
 306:	40 ec       	ldi	r20, 0xC0	; 192
 308:	5d e3       	ldi	r21, 0x3D	; 61
 30a:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	50 e4       	ldi	r21, 0x40	; 64
 316:	0e 94 de 01 	call	0x3bc	; 0x3bc <__addsf3>
 31a:	0e 94 4a 02 	call	0x494	; 0x494 <__fixunssfsi>
 31e:	86 2f       	mov	r24, r22
 320:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
			updateDutyCycle2b(dutyCycle4); // Actualizar PWM
 324:	0e 94 6f 00 	call	0xde	; 0xde <updateDutyCycle2b>
			break;
 328:	02 c0       	rjmp	.+4      	; 0x32e <__vector_21+0x178>
		
		case 5:
			POT=0;
 32a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <POT>
		
		default:
			break;
	}
	
	ADCSRA |= (1 << ADSC);	//Iniciar nueva conversión
 32e:	ea e7       	ldi	r30, 0x7A	; 122
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	80 64       	ori	r24, 0x40	; 64
 336:	80 83       	st	Z, r24
}
 338:	ff 91       	pop	r31
 33a:	ef 91       	pop	r30
 33c:	bf 91       	pop	r27
 33e:	af 91       	pop	r26
 340:	9f 91       	pop	r25
 342:	8f 91       	pop	r24
 344:	7f 91       	pop	r23
 346:	6f 91       	pop	r22
 348:	5f 91       	pop	r21
 34a:	4f 91       	pop	r20
 34c:	3f 91       	pop	r19
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <initPWM1A>:
#include <avr/io.h>
#include "PWM1.h"

void initPWM1A(){
	
	DDRB |= (1 << DDB1);	//Setear bit 1 del puerto B como salida
 35a:	84 b1       	in	r24, 0x04	; 4
 35c:	82 60       	ori	r24, 0x02	; 2
 35e:	84 b9       	out	0x04, r24	; 4
	
	//CONFIGURACIÓN DEL TIMER 1 PARA FAST PWM CON OCR1A COMO TOP
	TCCR1A = 0;
 360:	e0 e8       	ldi	r30, 0x80	; 128
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	10 82       	st	Z, r1
	TCCR1A |= (1 << COM1A1);	//no invertido
 366:	80 81       	ld	r24, Z
 368:	80 68       	ori	r24, 0x80	; 128
 36a:	80 83       	st	Z, r24
	
	//Modo fast PMW y top->OCR1A (MODO 14)
	TCCR1A |= (1 << WGM11);
 36c:	80 81       	ld	r24, Z
 36e:	82 60       	ori	r24, 0x02	; 2
 370:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 372:	e1 e8       	ldi	r30, 0x81	; 129
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	88 61       	ori	r24, 0x18	; 24
 37a:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);	//Prescaler de 8
 37c:	80 81       	ld	r24, Z
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	80 83       	st	Z, r24
	ICR1 = 2499;	//TOP
 382:	83 ec       	ldi	r24, 0xC3	; 195
 384:	99 e0       	ldi	r25, 0x09	; 9
 386:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 38a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 38e:	08 95       	ret

00000390 <updateDutyCycle1>:
	
}

void  updateDutyCycle1(uint8_t duty){
	OCR1A = duty;
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 396:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 39a:	08 95       	ret

0000039c <initPWM1B>:
#include <avr/io.h>
#include "PWM1B.h"

void initPWM1B(){
	
	DDRB |= (1 << DDB2);	//Setear bit 2 del puerto B como salida
 39c:	84 b1       	in	r24, 0x04	; 4
 39e:	84 60       	ori	r24, 0x04	; 4
 3a0:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << COM1B1);	//no invertido	
 3a2:	e0 e8       	ldi	r30, 0x80	; 128
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	80 62       	ori	r24, 0x20	; 32
 3aa:	80 83       	st	Z, r24
 3ac:	08 95       	ret

000003ae <updateDutyCycle1B>:
}

void  updateDutyCycle1B(uint8_t duty){
	OCR1B = duty;
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3b4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 3b8:	08 95       	ret

000003ba <__subsf3>:
 3ba:	50 58       	subi	r21, 0x80	; 128

000003bc <__addsf3>:
 3bc:	bb 27       	eor	r27, r27
 3be:	aa 27       	eor	r26, r26
 3c0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__addsf3x>
 3c4:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_round>
 3c8:	0e 94 bf 02 	call	0x57e	; 0x57e <__fp_pscA>
 3cc:	38 f0       	brcs	.+14     	; 0x3dc <__addsf3+0x20>
 3ce:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscB>
 3d2:	20 f0       	brcs	.+8      	; 0x3dc <__addsf3+0x20>
 3d4:	39 f4       	brne	.+14     	; 0x3e4 <__addsf3+0x28>
 3d6:	9f 3f       	cpi	r25, 0xFF	; 255
 3d8:	19 f4       	brne	.+6      	; 0x3e0 <__addsf3+0x24>
 3da:	26 f4       	brtc	.+8      	; 0x3e4 <__addsf3+0x28>
 3dc:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_nan>
 3e0:	0e f4       	brtc	.+2      	; 0x3e4 <__addsf3+0x28>
 3e2:	e0 95       	com	r30
 3e4:	e7 fb       	bst	r30, 7
 3e6:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>

000003ea <__addsf3x>:
 3ea:	e9 2f       	mov	r30, r25
 3ec:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_split3>
 3f0:	58 f3       	brcs	.-42     	; 0x3c8 <__addsf3+0xc>
 3f2:	ba 17       	cp	r27, r26
 3f4:	62 07       	cpc	r22, r18
 3f6:	73 07       	cpc	r23, r19
 3f8:	84 07       	cpc	r24, r20
 3fa:	95 07       	cpc	r25, r21
 3fc:	20 f0       	brcs	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fe:	79 f4       	brne	.+30     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 400:	a6 f5       	brtc	.+104    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 402:	0c 94 00 03 	jmp	0x600	; 0x600 <__fp_zero>
 406:	0e f4       	brtc	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 408:	e0 95       	com	r30
 40a:	0b 2e       	mov	r0, r27
 40c:	ba 2f       	mov	r27, r26
 40e:	a0 2d       	mov	r26, r0
 410:	0b 01       	movw	r0, r22
 412:	b9 01       	movw	r22, r18
 414:	90 01       	movw	r18, r0
 416:	0c 01       	movw	r0, r24
 418:	ca 01       	movw	r24, r20
 41a:	a0 01       	movw	r20, r0
 41c:	11 24       	eor	r1, r1
 41e:	ff 27       	eor	r31, r31
 420:	59 1b       	sub	r21, r25
 422:	99 f0       	breq	.+38     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 424:	59 3f       	cpi	r21, 0xF9	; 249
 426:	50 f4       	brcc	.+20     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 428:	50 3e       	cpi	r21, 0xE0	; 224
 42a:	68 f1       	brcs	.+90     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 42c:	1a 16       	cp	r1, r26
 42e:	f0 40       	sbci	r31, 0x00	; 0
 430:	a2 2f       	mov	r26, r18
 432:	23 2f       	mov	r18, r19
 434:	34 2f       	mov	r19, r20
 436:	44 27       	eor	r20, r20
 438:	58 5f       	subi	r21, 0xF8	; 248
 43a:	f3 cf       	rjmp	.-26     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 43c:	46 95       	lsr	r20
 43e:	37 95       	ror	r19
 440:	27 95       	ror	r18
 442:	a7 95       	ror	r26
 444:	f0 40       	sbci	r31, 0x00	; 0
 446:	53 95       	inc	r21
 448:	c9 f7       	brne	.-14     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 44a:	7e f4       	brtc	.+30     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 44c:	1f 16       	cp	r1, r31
 44e:	ba 0b       	sbc	r27, r26
 450:	62 0b       	sbc	r22, r18
 452:	73 0b       	sbc	r23, r19
 454:	84 0b       	sbc	r24, r20
 456:	ba f0       	brmi	.+46     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 458:	91 50       	subi	r25, 0x01	; 1
 45a:	a1 f0       	breq	.+40     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 45c:	ff 0f       	add	r31, r31
 45e:	bb 1f       	adc	r27, r27
 460:	66 1f       	adc	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	88 1f       	adc	r24, r24
 466:	c2 f7       	brpl	.-16     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 468:	0e c0       	rjmp	.+28     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 46a:	ba 0f       	add	r27, r26
 46c:	62 1f       	adc	r22, r18
 46e:	73 1f       	adc	r23, r19
 470:	84 1f       	adc	r24, r20
 472:	48 f4       	brcc	.+18     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 474:	87 95       	ror	r24
 476:	77 95       	ror	r23
 478:	67 95       	ror	r22
 47a:	b7 95       	ror	r27
 47c:	f7 95       	ror	r31
 47e:	9e 3f       	cpi	r25, 0xFE	; 254
 480:	08 f0       	brcs	.+2      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 482:	b0 cf       	rjmp	.-160    	; 0x3e4 <__addsf3+0x28>
 484:	93 95       	inc	r25
 486:	88 0f       	add	r24, r24
 488:	08 f0       	brcs	.+2      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 48a:	99 27       	eor	r25, r25
 48c:	ee 0f       	add	r30, r30
 48e:	97 95       	ror	r25
 490:	87 95       	ror	r24
 492:	08 95       	ret

00000494 <__fixunssfsi>:
 494:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__fp_splitA>
 498:	88 f0       	brcs	.+34     	; 0x4bc <__fixunssfsi+0x28>
 49a:	9f 57       	subi	r25, 0x7F	; 127
 49c:	98 f0       	brcs	.+38     	; 0x4c4 <__fixunssfsi+0x30>
 49e:	b9 2f       	mov	r27, r25
 4a0:	99 27       	eor	r25, r25
 4a2:	b7 51       	subi	r27, 0x17	; 23
 4a4:	b0 f0       	brcs	.+44     	; 0x4d2 <__fixunssfsi+0x3e>
 4a6:	e1 f0       	breq	.+56     	; 0x4e0 <__fixunssfsi+0x4c>
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	1a f0       	brmi	.+6      	; 0x4b8 <__fixunssfsi+0x24>
 4b2:	ba 95       	dec	r27
 4b4:	c9 f7       	brne	.-14     	; 0x4a8 <__fixunssfsi+0x14>
 4b6:	14 c0       	rjmp	.+40     	; 0x4e0 <__fixunssfsi+0x4c>
 4b8:	b1 30       	cpi	r27, 0x01	; 1
 4ba:	91 f0       	breq	.+36     	; 0x4e0 <__fixunssfsi+0x4c>
 4bc:	0e 94 00 03 	call	0x600	; 0x600 <__fp_zero>
 4c0:	b1 e0       	ldi	r27, 0x01	; 1
 4c2:	08 95       	ret
 4c4:	0c 94 00 03 	jmp	0x600	; 0x600 <__fp_zero>
 4c8:	67 2f       	mov	r22, r23
 4ca:	78 2f       	mov	r23, r24
 4cc:	88 27       	eor	r24, r24
 4ce:	b8 5f       	subi	r27, 0xF8	; 248
 4d0:	39 f0       	breq	.+14     	; 0x4e0 <__fixunssfsi+0x4c>
 4d2:	b9 3f       	cpi	r27, 0xF9	; 249
 4d4:	cc f3       	brlt	.-14     	; 0x4c8 <__fixunssfsi+0x34>
 4d6:	86 95       	lsr	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b3 95       	inc	r27
 4de:	d9 f7       	brne	.-10     	; 0x4d6 <__fixunssfsi+0x42>
 4e0:	3e f4       	brtc	.+14     	; 0x4f0 <__fixunssfsi+0x5c>
 4e2:	90 95       	com	r25
 4e4:	80 95       	com	r24
 4e6:	70 95       	com	r23
 4e8:	61 95       	neg	r22
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	8f 4f       	sbci	r24, 0xFF	; 255
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	08 95       	ret

000004f2 <__floatunsisf>:
 4f2:	e8 94       	clt
 4f4:	09 c0       	rjmp	.+18     	; 0x508 <__floatsisf+0x12>

000004f6 <__floatsisf>:
 4f6:	97 fb       	bst	r25, 7
 4f8:	3e f4       	brtc	.+14     	; 0x508 <__floatsisf+0x12>
 4fa:	90 95       	com	r25
 4fc:	80 95       	com	r24
 4fe:	70 95       	com	r23
 500:	61 95       	neg	r22
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8f 4f       	sbci	r24, 0xFF	; 255
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	99 23       	and	r25, r25
 50a:	a9 f0       	breq	.+42     	; 0x536 <__floatsisf+0x40>
 50c:	f9 2f       	mov	r31, r25
 50e:	96 e9       	ldi	r25, 0x96	; 150
 510:	bb 27       	eor	r27, r27
 512:	93 95       	inc	r25
 514:	f6 95       	lsr	r31
 516:	87 95       	ror	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b7 95       	ror	r27
 51e:	f1 11       	cpse	r31, r1
 520:	f8 cf       	rjmp	.-16     	; 0x512 <__floatsisf+0x1c>
 522:	fa f4       	brpl	.+62     	; 0x562 <__floatsisf+0x6c>
 524:	bb 0f       	add	r27, r27
 526:	11 f4       	brne	.+4      	; 0x52c <__floatsisf+0x36>
 528:	60 ff       	sbrs	r22, 0
 52a:	1b c0       	rjmp	.+54     	; 0x562 <__floatsisf+0x6c>
 52c:	6f 5f       	subi	r22, 0xFF	; 255
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	8f 4f       	sbci	r24, 0xFF	; 255
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	16 c0       	rjmp	.+44     	; 0x562 <__floatsisf+0x6c>
 536:	88 23       	and	r24, r24
 538:	11 f0       	breq	.+4      	; 0x53e <__floatsisf+0x48>
 53a:	96 e9       	ldi	r25, 0x96	; 150
 53c:	11 c0       	rjmp	.+34     	; 0x560 <__floatsisf+0x6a>
 53e:	77 23       	and	r23, r23
 540:	21 f0       	breq	.+8      	; 0x54a <__floatsisf+0x54>
 542:	9e e8       	ldi	r25, 0x8E	; 142
 544:	87 2f       	mov	r24, r23
 546:	76 2f       	mov	r23, r22
 548:	05 c0       	rjmp	.+10     	; 0x554 <__floatsisf+0x5e>
 54a:	66 23       	and	r22, r22
 54c:	71 f0       	breq	.+28     	; 0x56a <__floatsisf+0x74>
 54e:	96 e8       	ldi	r25, 0x86	; 134
 550:	86 2f       	mov	r24, r22
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	2a f0       	brmi	.+10     	; 0x562 <__floatsisf+0x6c>
 558:	9a 95       	dec	r25
 55a:	66 0f       	add	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	da f7       	brpl	.-10     	; 0x558 <__floatsisf+0x62>
 562:	88 0f       	add	r24, r24
 564:	96 95       	lsr	r25
 566:	87 95       	ror	r24
 568:	97 f9       	bld	r25, 7
 56a:	08 95       	ret

0000056c <__fp_inf>:
 56c:	97 f9       	bld	r25, 7
 56e:	9f 67       	ori	r25, 0x7F	; 127
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	08 95       	ret

00000578 <__fp_nan>:
 578:	9f ef       	ldi	r25, 0xFF	; 255
 57a:	80 ec       	ldi	r24, 0xC0	; 192
 57c:	08 95       	ret

0000057e <__fp_pscA>:
 57e:	00 24       	eor	r0, r0
 580:	0a 94       	dec	r0
 582:	16 16       	cp	r1, r22
 584:	17 06       	cpc	r1, r23
 586:	18 06       	cpc	r1, r24
 588:	09 06       	cpc	r0, r25
 58a:	08 95       	ret

0000058c <__fp_pscB>:
 58c:	00 24       	eor	r0, r0
 58e:	0a 94       	dec	r0
 590:	12 16       	cp	r1, r18
 592:	13 06       	cpc	r1, r19
 594:	14 06       	cpc	r1, r20
 596:	05 06       	cpc	r0, r21
 598:	08 95       	ret

0000059a <__fp_round>:
 59a:	09 2e       	mov	r0, r25
 59c:	03 94       	inc	r0
 59e:	00 0c       	add	r0, r0
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <__fp_round+0xc>
 5a2:	88 23       	and	r24, r24
 5a4:	52 f0       	brmi	.+20     	; 0x5ba <__fp_round+0x20>
 5a6:	bb 0f       	add	r27, r27
 5a8:	40 f4       	brcc	.+16     	; 0x5ba <__fp_round+0x20>
 5aa:	bf 2b       	or	r27, r31
 5ac:	11 f4       	brne	.+4      	; 0x5b2 <__fp_round+0x18>
 5ae:	60 ff       	sbrs	r22, 0
 5b0:	04 c0       	rjmp	.+8      	; 0x5ba <__fp_round+0x20>
 5b2:	6f 5f       	subi	r22, 0xFF	; 255
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	08 95       	ret

000005bc <__fp_split3>:
 5bc:	57 fd       	sbrc	r21, 7
 5be:	90 58       	subi	r25, 0x80	; 128
 5c0:	44 0f       	add	r20, r20
 5c2:	55 1f       	adc	r21, r21
 5c4:	59 f0       	breq	.+22     	; 0x5dc <__fp_splitA+0x10>
 5c6:	5f 3f       	cpi	r21, 0xFF	; 255
 5c8:	71 f0       	breq	.+28     	; 0x5e6 <__fp_splitA+0x1a>
 5ca:	47 95       	ror	r20

000005cc <__fp_splitA>:
 5cc:	88 0f       	add	r24, r24
 5ce:	97 fb       	bst	r25, 7
 5d0:	99 1f       	adc	r25, r25
 5d2:	61 f0       	breq	.+24     	; 0x5ec <__fp_splitA+0x20>
 5d4:	9f 3f       	cpi	r25, 0xFF	; 255
 5d6:	79 f0       	breq	.+30     	; 0x5f6 <__fp_splitA+0x2a>
 5d8:	87 95       	ror	r24
 5da:	08 95       	ret
 5dc:	12 16       	cp	r1, r18
 5de:	13 06       	cpc	r1, r19
 5e0:	14 06       	cpc	r1, r20
 5e2:	55 1f       	adc	r21, r21
 5e4:	f2 cf       	rjmp	.-28     	; 0x5ca <__fp_split3+0xe>
 5e6:	46 95       	lsr	r20
 5e8:	f1 df       	rcall	.-30     	; 0x5cc <__fp_splitA>
 5ea:	08 c0       	rjmp	.+16     	; 0x5fc <__fp_splitA+0x30>
 5ec:	16 16       	cp	r1, r22
 5ee:	17 06       	cpc	r1, r23
 5f0:	18 06       	cpc	r1, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	f1 cf       	rjmp	.-30     	; 0x5d8 <__fp_splitA+0xc>
 5f6:	86 95       	lsr	r24
 5f8:	71 05       	cpc	r23, r1
 5fa:	61 05       	cpc	r22, r1
 5fc:	08 94       	sec
 5fe:	08 95       	ret

00000600 <__fp_zero>:
 600:	e8 94       	clt

00000602 <__fp_szero>:
 602:	bb 27       	eor	r27, r27
 604:	66 27       	eor	r22, r22
 606:	77 27       	eor	r23, r23
 608:	cb 01       	movw	r24, r22
 60a:	97 f9       	bld	r25, 7
 60c:	08 95       	ret

0000060e <__mulsf3>:
 60e:	0e 94 1a 03 	call	0x634	; 0x634 <__mulsf3x>
 612:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_round>
 616:	0e 94 bf 02 	call	0x57e	; 0x57e <__fp_pscA>
 61a:	38 f0       	brcs	.+14     	; 0x62a <__mulsf3+0x1c>
 61c:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscB>
 620:	20 f0       	brcs	.+8      	; 0x62a <__mulsf3+0x1c>
 622:	95 23       	and	r25, r21
 624:	11 f0       	breq	.+4      	; 0x62a <__mulsf3+0x1c>
 626:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>
 62a:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_nan>
 62e:	11 24       	eor	r1, r1
 630:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>

00000634 <__mulsf3x>:
 634:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_split3>
 638:	70 f3       	brcs	.-36     	; 0x616 <__mulsf3+0x8>

0000063a <__mulsf3_pse>:
 63a:	95 9f       	mul	r25, r21
 63c:	c1 f3       	breq	.-16     	; 0x62e <__mulsf3+0x20>
 63e:	95 0f       	add	r25, r21
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	55 1f       	adc	r21, r21
 644:	62 9f       	mul	r22, r18
 646:	f0 01       	movw	r30, r0
 648:	72 9f       	mul	r23, r18
 64a:	bb 27       	eor	r27, r27
 64c:	f0 0d       	add	r31, r0
 64e:	b1 1d       	adc	r27, r1
 650:	63 9f       	mul	r22, r19
 652:	aa 27       	eor	r26, r26
 654:	f0 0d       	add	r31, r0
 656:	b1 1d       	adc	r27, r1
 658:	aa 1f       	adc	r26, r26
 65a:	64 9f       	mul	r22, r20
 65c:	66 27       	eor	r22, r22
 65e:	b0 0d       	add	r27, r0
 660:	a1 1d       	adc	r26, r1
 662:	66 1f       	adc	r22, r22
 664:	82 9f       	mul	r24, r18
 666:	22 27       	eor	r18, r18
 668:	b0 0d       	add	r27, r0
 66a:	a1 1d       	adc	r26, r1
 66c:	62 1f       	adc	r22, r18
 66e:	73 9f       	mul	r23, r19
 670:	b0 0d       	add	r27, r0
 672:	a1 1d       	adc	r26, r1
 674:	62 1f       	adc	r22, r18
 676:	83 9f       	mul	r24, r19
 678:	a0 0d       	add	r26, r0
 67a:	61 1d       	adc	r22, r1
 67c:	22 1f       	adc	r18, r18
 67e:	74 9f       	mul	r23, r20
 680:	33 27       	eor	r19, r19
 682:	a0 0d       	add	r26, r0
 684:	61 1d       	adc	r22, r1
 686:	23 1f       	adc	r18, r19
 688:	84 9f       	mul	r24, r20
 68a:	60 0d       	add	r22, r0
 68c:	21 1d       	adc	r18, r1
 68e:	82 2f       	mov	r24, r18
 690:	76 2f       	mov	r23, r22
 692:	6a 2f       	mov	r22, r26
 694:	11 24       	eor	r1, r1
 696:	9f 57       	subi	r25, 0x7F	; 127
 698:	50 40       	sbci	r21, 0x00	; 0
 69a:	9a f0       	brmi	.+38     	; 0x6c2 <__mulsf3_pse+0x88>
 69c:	f1 f0       	breq	.+60     	; 0x6da <__mulsf3_pse+0xa0>
 69e:	88 23       	and	r24, r24
 6a0:	4a f0       	brmi	.+18     	; 0x6b4 <__mulsf3_pse+0x7a>
 6a2:	ee 0f       	add	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	bb 1f       	adc	r27, r27
 6a8:	66 1f       	adc	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	88 1f       	adc	r24, r24
 6ae:	91 50       	subi	r25, 0x01	; 1
 6b0:	50 40       	sbci	r21, 0x00	; 0
 6b2:	a9 f7       	brne	.-22     	; 0x69e <__mulsf3_pse+0x64>
 6b4:	9e 3f       	cpi	r25, 0xFE	; 254
 6b6:	51 05       	cpc	r21, r1
 6b8:	80 f0       	brcs	.+32     	; 0x6da <__mulsf3_pse+0xa0>
 6ba:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>
 6be:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>
 6c2:	5f 3f       	cpi	r21, 0xFF	; 255
 6c4:	e4 f3       	brlt	.-8      	; 0x6be <__mulsf3_pse+0x84>
 6c6:	98 3e       	cpi	r25, 0xE8	; 232
 6c8:	d4 f3       	brlt	.-12     	; 0x6be <__mulsf3_pse+0x84>
 6ca:	86 95       	lsr	r24
 6cc:	77 95       	ror	r23
 6ce:	67 95       	ror	r22
 6d0:	b7 95       	ror	r27
 6d2:	f7 95       	ror	r31
 6d4:	e7 95       	ror	r30
 6d6:	9f 5f       	subi	r25, 0xFF	; 255
 6d8:	c1 f7       	brne	.-16     	; 0x6ca <__mulsf3_pse+0x90>
 6da:	fe 2b       	or	r31, r30
 6dc:	88 0f       	add	r24, r24
 6de:	91 1d       	adc	r25, r1
 6e0:	96 95       	lsr	r25
 6e2:	87 95       	ror	r24
 6e4:	97 f9       	bld	r25, 7
 6e6:	08 95       	ret

000006e8 <_exit>:
 6e8:	f8 94       	cli

000006ea <__stop_program>:
 6ea:	ff cf       	rjmp	.-2      	; 0x6ea <__stop_program>
