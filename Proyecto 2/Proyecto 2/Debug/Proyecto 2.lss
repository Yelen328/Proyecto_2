
Proyecto 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000065e  000006f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000065e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  000006f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009fa  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ad  00000000  00000000  0000120a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000585  00000000  00000000  000019b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00001f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044f  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  000024cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000259a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  9e:	0c 94 2d 03 	jmp	0x65a	; 0x65a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <INIT_TIMER2>:
}

void INIT_TIMER2(){
	

	DDRB |= (1 << DDB3);	//Setear bit 3 del puerto B como salida
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	84 b9       	out	0x04, r24	; 4
	//DDRD |= (1 << DDD3);	//Setear bit 3 del puerto D como salida
		
	//CONFIGURACIÓN DEL TIMER 2 PARA FAST PWM CON OCR1A COMO TOP
	TCCR2A = 0;
  ac:	e0 eb       	ldi	r30, 0xB0	; 176
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
	TCCR2A |= (1 << COM2A1);	//no invertido para la salida 2A
  b2:	80 81       	ld	r24, Z
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	80 83       	st	Z, r24
	//TCCR2A |= (1 << COM2B1);	//no invertido para la salida 2B
		
		
	//Modo fast PMW (MODO 3)
	TCCR2A |= (1 << WGM21)|(1 << WGM20);
  b8:	80 81       	ld	r24, Z
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	80 83       	st	Z, r24
	TCCR2B = 0;
  be:	e1 eb       	ldi	r30, 0xB1	; 177
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	TCCR2B |= (1<<CS22)|(1<<CS20);	//Prescaler de 128
  c4:	80 81       	ld	r24, Z
  c6:	85 60       	ori	r24, 0x05	; 5
  c8:	80 83       	st	Z, r24
	OCR2A =200;  // ~78% duty
  ca:	88 ec       	ldi	r24, 0xC8	; 200
  cc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  d0:	08 95       	ret

000000d2 <updateDutyCycle2A>:
		
}

void  updateDutyCycle2A(uint8_t duty){
	OCR2A = duty;
  d2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  d6:	08 95       	ret

000000d8 <INIT_PIN_CHANGE>:
}

void INIT_PIN_CHANGE()
{//Habilitar interrupciones de pin change
	PCICR |= (1 << PCIE1);     // Habilitar interrupción de cambio de estado
  d8:	e8 e6       	ldi	r30, 0x68	; 104
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);  // Habilita interrupción para PORTC3 (bit 3 de Puerto C)
  e2:	ec e6       	ldi	r30, 0x6C	; 108
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <initUART>:
}

void initUART(){
	//Configurar pines PD0 (TX) y PD1 (TX)
	DDRD |= (1<<DDD1);
  ee:	8a b1       	in	r24, 0x0a	; 10
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<DDD0);
  f4:	8a b1       	in	r24, 0x0a	; 10
  f6:	8e 7f       	andi	r24, 0xFE	; 254
  f8:	8a b9       	out	0x0a, r24	; 10
	
	//Configurar UCSR0A
	UCSR0A=0;
  fa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//Configuración UCSR0B: Habililitndo la interrupción al escribir:
	//-Habilibitar recepción
	//-Habilitación de transmisión
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)| (1<< TXEN0);
  fe:	e1 ec       	ldi	r30, 0xC1	; 193
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	88 69       	ori	r24, 0x98	; 152
 106:	80 83       	st	Z, r24
	//Configurar UCSR0C
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 108:	e2 ec       	ldi	r30, 0xC2	; 194
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	86 60       	ori	r24, 0x06	; 6
 110:	80 83       	st	Z, r24
	//Configurar UBRR0: UBRR0 = 103 -> 9600  @ 16MHz
	UBRR0 = 103;
 112:	87 e6       	ldi	r24, 0x67	; 103
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 11a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 11e:	08 95       	ret

00000120 <INIT_ADC>:
}


void INIT_ADC(){
	ADMUX = 0;	//Apagar todo
 120:	ec e7       	ldi	r30, 0x7C	; 124
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	10 82       	st	Z, r1
	
	//Voltaje de referencia 5V
	ADMUX |=(1<<REFS0);
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); //orientación (izquierda)
 12c:	80 81       	ld	r24, Z
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	80 83       	st	Z, r24
	ADCSRA = 0;	//Apagar todo
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	10 82       	st	Z, r1
	ADCSRA |=(1<<ADPS1)	| (1 << ADPS0); //Configuración del presacaler 8
 138:	80 81       	ld	r24, Z
 13a:	83 60       	ori	r24, 0x03	; 3
 13c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//Habilitación de interrupciones
 13e:	80 81       	ld	r24, Z
 140:	88 60       	ori	r24, 0x08	; 8
 142:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	//Habilitar ADS
 144:	80 81       	ld	r24, Z
 146:	80 68       	ori	r24, 0x80	; 128
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <setup>:
		
	}
}

void setup(){
	cli();	//Desabilitar interrupciones
 14c:	f8 94       	cli
	INIT_TIMER2();
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <INIT_TIMER2>
	INIT_ADC();
 152:	0e 94 90 00 	call	0x120	; 0x120 <INIT_ADC>
	initPWM1A();
 156:	0e 94 66 01 	call	0x2cc	; 0x2cc <initPWM1A>
	initPWM1B();
 15a:	0e 94 87 01 	call	0x30e	; 0x30e <initPWM1B>
	
	INIT_PIN_CHANGE();
 15e:	0e 94 6c 00 	call	0xd8	; 0xd8 <INIT_PIN_CHANGE>
	initUART();
 162:	0e 94 77 00 	call	0xee	; 0xee <initUART>
	

	//Configurar los puertos de salida (LEDS)
	DDRB |= (1 << PORTB0);
 166:	84 b1       	in	r24, 0x04	; 4
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<< PORTB4);
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	8f 7e       	andi	r24, 0xEF	; 239
 170:	85 b9       	out	0x05, r24	; 5
	DDRD |= (1 << PORTD7)|(1 << PORTD6);
 172:	8a b1       	in	r24, 0x0a	; 10
 174:	80 6c       	ori	r24, 0xC0	; 192
 176:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << PORTD7)|(PORTD6));
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	89 77       	andi	r24, 0x79	; 121
 17c:	8b b9       	out	0x0b, r24	; 11
	//Configurar el bit 3 del puerto C como entrada
	PORTC &= ~(1 << PORTC3);
 17e:	88 b1       	in	r24, 0x08	; 8
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC3);		//Pull up activado
 184:	88 b1       	in	r24, 0x08	; 8
 186:	88 60       	ori	r24, 0x08	; 8
 188:	88 b9       	out	0x08, r24	; 8
	
	//CLKPR = (1 << CLKPCE); //Habilita cambios de prescaler
	//CLKPR = (1 << CLKPS2);	// 1MHz
	sei();		//Habilita cambios de interrupción
 18a:	78 94       	sei
	
	ADCSRA |= (1 << ADSC); // Iniciar primera conversión
 18c:	ea e7       	ldi	r30, 0x7A	; 122
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 64       	ori	r24, 0x40	; 64
 194:	80 83       	st	Z, r24
 196:	08 95       	ret

00000198 <main>:
void INIT_PIN_CHANGE();


int main(void)
{
	setup();
 198:	0e 94 a6 00 	call	0x14c	; 0x14c <setup>
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0x4>

0000019e <__vector_21>:
}

/*************VECTOR DE INTERRUPCIÓN************/

ISR(ADC_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	POT++;
 1c0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <POT>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <POT>
	
	switch (POT){
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	81 f1       	breq	.+96     	; 0x22e <__vector_21+0x90>
 1ce:	18 f4       	brcc	.+6      	; 0x1d6 <__vector_21+0x38>
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	41 f0       	breq	.+16     	; 0x1e4 <__vector_21+0x46>
 1d4:	65 c0       	rjmp	.+202    	; 0x2a0 <__vector_21+0x102>
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	09 f4       	brne	.+2      	; 0x1dc <__vector_21+0x3e>
 1da:	4e c0       	rjmp	.+156    	; 0x278 <__vector_21+0xda>
 1dc:	84 30       	cpi	r24, 0x04	; 4
 1de:	09 f4       	brne	.+2      	; 0x1e2 <__vector_21+0x44>
 1e0:	5d c0       	rjmp	.+186    	; 0x29c <__vector_21+0xfe>
 1e2:	5e c0       	rjmp	.+188    	; 0x2a0 <__vector_21+0x102>
		case 1:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));  // Limpiar bit
 1e4:	ec e7       	ldi	r30, 0x7C	; 124
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	88 7f       	andi	r24, 0xF8	; 248
 1ec:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX2) | (1<<MUX1);//Selección de canal Bit 6 del puerto C
 1ee:	80 81       	ld	r24, Z
 1f0:	86 60       	ori	r24, 0x06	; 6
 1f2:	80 83       	st	Z, r24
		ADC1=ADCH;
 1f4:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1f8:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <ADC1>
		dutyCycle1 = (ADC1 * (180.0 / 255.0)) + 70.0;
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 34 02 	call	0x468	; 0x468 <__floatsisf>
 206:	25 eb       	ldi	r18, 0xB5	; 181
 208:	34 eb       	ldi	r19, 0xB4	; 180
 20a:	44 e3       	ldi	r20, 0x34	; 52
 20c:	5f e3       	ldi	r21, 0x3F	; 63
 20e:	0e 94 c0 02 	call	0x580	; 0x580 <__mulsf3>
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	4c e8       	ldi	r20, 0x8C	; 140
 218:	52 e4       	ldi	r21, 0x42	; 66
 21a:	0e 94 97 01 	call	0x32e	; 0x32e <__addsf3>
 21e:	0e 94 03 02 	call	0x406	; 0x406 <__fixunssfsi>
 222:	86 2f       	mov	r24, r22
 224:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <dutyCycle1>
		updateDutyCycle1(dutyCycle1); // Actualizar PWM
 228:	0e 94 81 01 	call	0x302	; 0x302 <updateDutyCycle1>
		break;
 22c:	39 c0       	rjmp	.+114    	; 0x2a0 <__vector_21+0x102>
		
		case 2:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));  // Limpiar bit
 22e:	ec e7       	ldi	r30, 0x7C	; 124
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	88 7f       	andi	r24, 0xF8	; 248
 236:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Selección de canal Bit 7 del puerto C
 238:	80 81       	ld	r24, Z
 23a:	87 60       	ori	r24, 0x07	; 7
 23c:	80 83       	st	Z, r24
		ADC2=ADCH;
 23e:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 242:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <ADC2>
		dutyCycle2 = 1010.00 + ADC2 * (4000.00/255.00);
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 34 02 	call	0x468	; 0x468 <__floatsisf>
 250:	2b ef       	ldi	r18, 0xFB	; 251
 252:	3a ef       	ldi	r19, 0xFA	; 250
 254:	4a e7       	ldi	r20, 0x7A	; 122
 256:	51 e4       	ldi	r21, 0x41	; 65
 258:	0e 94 c0 02 	call	0x580	; 0x580 <__mulsf3>
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e8       	ldi	r19, 0x80	; 128
 260:	4c e7       	ldi	r20, 0x7C	; 124
 262:	54 e4       	ldi	r21, 0x44	; 68
 264:	0e 94 97 01 	call	0x32e	; 0x32e <__addsf3>
 268:	0e 94 03 02 	call	0x406	; 0x406 <__fixunssfsi>
 26c:	86 2f       	mov	r24, r22
 26e:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <dutyCycle2>
		updateDutyCycle1B(dutyCycle2); // Actualizar PWM
 272:	0e 94 90 01 	call	0x320	; 0x320 <updateDutyCycle1B>
		break;
 276:	14 c0       	rjmp	.+40     	; 0x2a0 <__vector_21+0x102>
		
		case 3:
		
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));  // Limpiar bit MUX0 primero
 278:	ec e7       	ldi	r30, 0x7C	; 124
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	88 7f       	andi	r24, 0xF8	; 248
 280:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX2) | (1<<MUX0);//Selección de canal Bit 5 del puerto C
 282:	80 81       	ld	r24, Z
 284:	85 60       	ori	r24, 0x05	; 5
 286:	80 83       	st	Z, r24
		ADC3=ADCH;
 288:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 28c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		dutyCycle3=200;
 290:	88 ec       	ldi	r24, 0xC8	; 200
 292:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		updateDutyCycle2A(dutyCycle3); // Actualizar PWM
 296:	0e 94 69 00 	call	0xd2	; 0xd2 <updateDutyCycle2A>
		break;
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <__vector_21+0x102>
		
		case 4:
		POT=0;
 29c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <POT>
		
		default:
		break;
	}
	
	ADCSRA |= (1 << ADSC);	//Iniciar nueva conversión
 2a0:	ea e7       	ldi	r30, 0x7A	; 122
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	80 83       	st	Z, r24
}
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <initPWM1A>:
#include <avr/io.h>
#include "PWM1.h"

void initPWM1A(){
	
	DDRB |= (1 << DDB1);	//Setear bit 1 del puerto B como salida
 2cc:	84 b1       	in	r24, 0x04	; 4
 2ce:	82 60       	ori	r24, 0x02	; 2
 2d0:	84 b9       	out	0x04, r24	; 4
	
	//CONFIGURACIÓN DEL TIMER 1 PARA FAST PWM CON OCR1A COMO TOP
	TCCR1A = 0;
 2d2:	e0 e8       	ldi	r30, 0x80	; 128
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	10 82       	st	Z, r1
	TCCR1A |= (1 << COM1A1);	//no invertido
 2d8:	80 81       	ld	r24, Z
 2da:	80 68       	ori	r24, 0x80	; 128
 2dc:	80 83       	st	Z, r24
	
	//Modo fast PMW y top->OCR1A (MODO 14)
	TCCR1A |= (1 << WGM11);
 2de:	80 81       	ld	r24, Z
 2e0:	82 60       	ori	r24, 0x02	; 2
 2e2:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 2e4:	e1 e8       	ldi	r30, 0x81	; 129
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	88 61       	ori	r24, 0x18	; 24
 2ec:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);	//Prescaler de 8
 2ee:	80 81       	ld	r24, Z
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	80 83       	st	Z, r24
	ICR1 = 2499;	//TOP
 2f4:	83 ec       	ldi	r24, 0xC3	; 195
 2f6:	99 e0       	ldi	r25, 0x09	; 9
 2f8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2fc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 300:	08 95       	ret

00000302 <updateDutyCycle1>:
	
}

void  updateDutyCycle1(uint8_t duty){
	OCR1A = duty;
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 308:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 30c:	08 95       	ret

0000030e <initPWM1B>:
#include <avr/io.h>
#include "PWM1B.h"

void initPWM1B(){
	
	DDRB |= (1 << DDB2);	//Setear bit 2 del puerto B como salida
 30e:	84 b1       	in	r24, 0x04	; 4
 310:	84 60       	ori	r24, 0x04	; 4
 312:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << COM1B1);	//no invertido	
 314:	e0 e8       	ldi	r30, 0x80	; 128
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	80 62       	ori	r24, 0x20	; 32
 31c:	80 83       	st	Z, r24
 31e:	08 95       	ret

00000320 <updateDutyCycle1B>:
}

void  updateDutyCycle1B(uint8_t duty){
	OCR1B = duty;
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 326:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 32a:	08 95       	ret

0000032c <__subsf3>:
 32c:	50 58       	subi	r21, 0x80	; 128

0000032e <__addsf3>:
 32e:	bb 27       	eor	r27, r27
 330:	aa 27       	eor	r26, r26
 332:	0e 94 ae 01 	call	0x35c	; 0x35c <__addsf3x>
 336:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_round>
 33a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__fp_pscA>
 33e:	38 f0       	brcs	.+14     	; 0x34e <__addsf3+0x20>
 340:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fp_pscB>
 344:	20 f0       	brcs	.+8      	; 0x34e <__addsf3+0x20>
 346:	39 f4       	brne	.+14     	; 0x356 <__addsf3+0x28>
 348:	9f 3f       	cpi	r25, 0xFF	; 255
 34a:	19 f4       	brne	.+6      	; 0x352 <__addsf3+0x24>
 34c:	26 f4       	brtc	.+8      	; 0x356 <__addsf3+0x28>
 34e:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__fp_nan>
 352:	0e f4       	brtc	.+2      	; 0x356 <__addsf3+0x28>
 354:	e0 95       	com	r30
 356:	e7 fb       	bst	r30, 7
 358:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_inf>

0000035c <__addsf3x>:
 35c:	e9 2f       	mov	r30, r25
 35e:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_split3>
 362:	58 f3       	brcs	.-42     	; 0x33a <__addsf3+0xc>
 364:	ba 17       	cp	r27, r26
 366:	62 07       	cpc	r22, r18
 368:	73 07       	cpc	r23, r19
 36a:	84 07       	cpc	r24, r20
 36c:	95 07       	cpc	r25, r21
 36e:	20 f0       	brcs	.+8      	; 0x378 <__addsf3x+0x1c>
 370:	79 f4       	brne	.+30     	; 0x390 <__addsf3x+0x34>
 372:	a6 f5       	brtc	.+104    	; 0x3dc <__addsf3x+0x80>
 374:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_zero>
 378:	0e f4       	brtc	.+2      	; 0x37c <__addsf3x+0x20>
 37a:	e0 95       	com	r30
 37c:	0b 2e       	mov	r0, r27
 37e:	ba 2f       	mov	r27, r26
 380:	a0 2d       	mov	r26, r0
 382:	0b 01       	movw	r0, r22
 384:	b9 01       	movw	r22, r18
 386:	90 01       	movw	r18, r0
 388:	0c 01       	movw	r0, r24
 38a:	ca 01       	movw	r24, r20
 38c:	a0 01       	movw	r20, r0
 38e:	11 24       	eor	r1, r1
 390:	ff 27       	eor	r31, r31
 392:	59 1b       	sub	r21, r25
 394:	99 f0       	breq	.+38     	; 0x3bc <__addsf3x+0x60>
 396:	59 3f       	cpi	r21, 0xF9	; 249
 398:	50 f4       	brcc	.+20     	; 0x3ae <__addsf3x+0x52>
 39a:	50 3e       	cpi	r21, 0xE0	; 224
 39c:	68 f1       	brcs	.+90     	; 0x3f8 <__addsf3x+0x9c>
 39e:	1a 16       	cp	r1, r26
 3a0:	f0 40       	sbci	r31, 0x00	; 0
 3a2:	a2 2f       	mov	r26, r18
 3a4:	23 2f       	mov	r18, r19
 3a6:	34 2f       	mov	r19, r20
 3a8:	44 27       	eor	r20, r20
 3aa:	58 5f       	subi	r21, 0xF8	; 248
 3ac:	f3 cf       	rjmp	.-26     	; 0x394 <__addsf3x+0x38>
 3ae:	46 95       	lsr	r20
 3b0:	37 95       	ror	r19
 3b2:	27 95       	ror	r18
 3b4:	a7 95       	ror	r26
 3b6:	f0 40       	sbci	r31, 0x00	; 0
 3b8:	53 95       	inc	r21
 3ba:	c9 f7       	brne	.-14     	; 0x3ae <__addsf3x+0x52>
 3bc:	7e f4       	brtc	.+30     	; 0x3dc <__addsf3x+0x80>
 3be:	1f 16       	cp	r1, r31
 3c0:	ba 0b       	sbc	r27, r26
 3c2:	62 0b       	sbc	r22, r18
 3c4:	73 0b       	sbc	r23, r19
 3c6:	84 0b       	sbc	r24, r20
 3c8:	ba f0       	brmi	.+46     	; 0x3f8 <__addsf3x+0x9c>
 3ca:	91 50       	subi	r25, 0x01	; 1
 3cc:	a1 f0       	breq	.+40     	; 0x3f6 <__addsf3x+0x9a>
 3ce:	ff 0f       	add	r31, r31
 3d0:	bb 1f       	adc	r27, r27
 3d2:	66 1f       	adc	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	88 1f       	adc	r24, r24
 3d8:	c2 f7       	brpl	.-16     	; 0x3ca <__addsf3x+0x6e>
 3da:	0e c0       	rjmp	.+28     	; 0x3f8 <__addsf3x+0x9c>
 3dc:	ba 0f       	add	r27, r26
 3de:	62 1f       	adc	r22, r18
 3e0:	73 1f       	adc	r23, r19
 3e2:	84 1f       	adc	r24, r20
 3e4:	48 f4       	brcc	.+18     	; 0x3f8 <__addsf3x+0x9c>
 3e6:	87 95       	ror	r24
 3e8:	77 95       	ror	r23
 3ea:	67 95       	ror	r22
 3ec:	b7 95       	ror	r27
 3ee:	f7 95       	ror	r31
 3f0:	9e 3f       	cpi	r25, 0xFE	; 254
 3f2:	08 f0       	brcs	.+2      	; 0x3f6 <__addsf3x+0x9a>
 3f4:	b0 cf       	rjmp	.-160    	; 0x356 <__addsf3+0x28>
 3f6:	93 95       	inc	r25
 3f8:	88 0f       	add	r24, r24
 3fa:	08 f0       	brcs	.+2      	; 0x3fe <__addsf3x+0xa2>
 3fc:	99 27       	eor	r25, r25
 3fe:	ee 0f       	add	r30, r30
 400:	97 95       	ror	r25
 402:	87 95       	ror	r24
 404:	08 95       	ret

00000406 <__fixunssfsi>:
 406:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_splitA>
 40a:	88 f0       	brcs	.+34     	; 0x42e <__fixunssfsi+0x28>
 40c:	9f 57       	subi	r25, 0x7F	; 127
 40e:	98 f0       	brcs	.+38     	; 0x436 <__fixunssfsi+0x30>
 410:	b9 2f       	mov	r27, r25
 412:	99 27       	eor	r25, r25
 414:	b7 51       	subi	r27, 0x17	; 23
 416:	b0 f0       	brcs	.+44     	; 0x444 <__fixunssfsi+0x3e>
 418:	e1 f0       	breq	.+56     	; 0x452 <__fixunssfsi+0x4c>
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	88 1f       	adc	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	1a f0       	brmi	.+6      	; 0x42a <__fixunssfsi+0x24>
 424:	ba 95       	dec	r27
 426:	c9 f7       	brne	.-14     	; 0x41a <__fixunssfsi+0x14>
 428:	14 c0       	rjmp	.+40     	; 0x452 <__fixunssfsi+0x4c>
 42a:	b1 30       	cpi	r27, 0x01	; 1
 42c:	91 f0       	breq	.+36     	; 0x452 <__fixunssfsi+0x4c>
 42e:	0e 94 b9 02 	call	0x572	; 0x572 <__fp_zero>
 432:	b1 e0       	ldi	r27, 0x01	; 1
 434:	08 95       	ret
 436:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_zero>
 43a:	67 2f       	mov	r22, r23
 43c:	78 2f       	mov	r23, r24
 43e:	88 27       	eor	r24, r24
 440:	b8 5f       	subi	r27, 0xF8	; 248
 442:	39 f0       	breq	.+14     	; 0x452 <__fixunssfsi+0x4c>
 444:	b9 3f       	cpi	r27, 0xF9	; 249
 446:	cc f3       	brlt	.-14     	; 0x43a <__fixunssfsi+0x34>
 448:	86 95       	lsr	r24
 44a:	77 95       	ror	r23
 44c:	67 95       	ror	r22
 44e:	b3 95       	inc	r27
 450:	d9 f7       	brne	.-10     	; 0x448 <__fixunssfsi+0x42>
 452:	3e f4       	brtc	.+14     	; 0x462 <__fixunssfsi+0x5c>
 454:	90 95       	com	r25
 456:	80 95       	com	r24
 458:	70 95       	com	r23
 45a:	61 95       	neg	r22
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	8f 4f       	sbci	r24, 0xFF	; 255
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	08 95       	ret

00000464 <__floatunsisf>:
 464:	e8 94       	clt
 466:	09 c0       	rjmp	.+18     	; 0x47a <__floatsisf+0x12>

00000468 <__floatsisf>:
 468:	97 fb       	bst	r25, 7
 46a:	3e f4       	brtc	.+14     	; 0x47a <__floatsisf+0x12>
 46c:	90 95       	com	r25
 46e:	80 95       	com	r24
 470:	70 95       	com	r23
 472:	61 95       	neg	r22
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	8f 4f       	sbci	r24, 0xFF	; 255
 478:	9f 4f       	sbci	r25, 0xFF	; 255
 47a:	99 23       	and	r25, r25
 47c:	a9 f0       	breq	.+42     	; 0x4a8 <__floatsisf+0x40>
 47e:	f9 2f       	mov	r31, r25
 480:	96 e9       	ldi	r25, 0x96	; 150
 482:	bb 27       	eor	r27, r27
 484:	93 95       	inc	r25
 486:	f6 95       	lsr	r31
 488:	87 95       	ror	r24
 48a:	77 95       	ror	r23
 48c:	67 95       	ror	r22
 48e:	b7 95       	ror	r27
 490:	f1 11       	cpse	r31, r1
 492:	f8 cf       	rjmp	.-16     	; 0x484 <__floatsisf+0x1c>
 494:	fa f4       	brpl	.+62     	; 0x4d4 <__floatsisf+0x6c>
 496:	bb 0f       	add	r27, r27
 498:	11 f4       	brne	.+4      	; 0x49e <__floatsisf+0x36>
 49a:	60 ff       	sbrs	r22, 0
 49c:	1b c0       	rjmp	.+54     	; 0x4d4 <__floatsisf+0x6c>
 49e:	6f 5f       	subi	r22, 0xFF	; 255
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	8f 4f       	sbci	r24, 0xFF	; 255
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	16 c0       	rjmp	.+44     	; 0x4d4 <__floatsisf+0x6c>
 4a8:	88 23       	and	r24, r24
 4aa:	11 f0       	breq	.+4      	; 0x4b0 <__floatsisf+0x48>
 4ac:	96 e9       	ldi	r25, 0x96	; 150
 4ae:	11 c0       	rjmp	.+34     	; 0x4d2 <__floatsisf+0x6a>
 4b0:	77 23       	and	r23, r23
 4b2:	21 f0       	breq	.+8      	; 0x4bc <__floatsisf+0x54>
 4b4:	9e e8       	ldi	r25, 0x8E	; 142
 4b6:	87 2f       	mov	r24, r23
 4b8:	76 2f       	mov	r23, r22
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__floatsisf+0x5e>
 4bc:	66 23       	and	r22, r22
 4be:	71 f0       	breq	.+28     	; 0x4dc <__floatsisf+0x74>
 4c0:	96 e8       	ldi	r25, 0x86	; 134
 4c2:	86 2f       	mov	r24, r22
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	2a f0       	brmi	.+10     	; 0x4d4 <__floatsisf+0x6c>
 4ca:	9a 95       	dec	r25
 4cc:	66 0f       	add	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	88 1f       	adc	r24, r24
 4d2:	da f7       	brpl	.-10     	; 0x4ca <__floatsisf+0x62>
 4d4:	88 0f       	add	r24, r24
 4d6:	96 95       	lsr	r25
 4d8:	87 95       	ror	r24
 4da:	97 f9       	bld	r25, 7
 4dc:	08 95       	ret

000004de <__fp_inf>:
 4de:	97 f9       	bld	r25, 7
 4e0:	9f 67       	ori	r25, 0x7F	; 127
 4e2:	80 e8       	ldi	r24, 0x80	; 128
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	08 95       	ret

000004ea <__fp_nan>:
 4ea:	9f ef       	ldi	r25, 0xFF	; 255
 4ec:	80 ec       	ldi	r24, 0xC0	; 192
 4ee:	08 95       	ret

000004f0 <__fp_pscA>:
 4f0:	00 24       	eor	r0, r0
 4f2:	0a 94       	dec	r0
 4f4:	16 16       	cp	r1, r22
 4f6:	17 06       	cpc	r1, r23
 4f8:	18 06       	cpc	r1, r24
 4fa:	09 06       	cpc	r0, r25
 4fc:	08 95       	ret

000004fe <__fp_pscB>:
 4fe:	00 24       	eor	r0, r0
 500:	0a 94       	dec	r0
 502:	12 16       	cp	r1, r18
 504:	13 06       	cpc	r1, r19
 506:	14 06       	cpc	r1, r20
 508:	05 06       	cpc	r0, r21
 50a:	08 95       	ret

0000050c <__fp_round>:
 50c:	09 2e       	mov	r0, r25
 50e:	03 94       	inc	r0
 510:	00 0c       	add	r0, r0
 512:	11 f4       	brne	.+4      	; 0x518 <__fp_round+0xc>
 514:	88 23       	and	r24, r24
 516:	52 f0       	brmi	.+20     	; 0x52c <__fp_round+0x20>
 518:	bb 0f       	add	r27, r27
 51a:	40 f4       	brcc	.+16     	; 0x52c <__fp_round+0x20>
 51c:	bf 2b       	or	r27, r31
 51e:	11 f4       	brne	.+4      	; 0x524 <__fp_round+0x18>
 520:	60 ff       	sbrs	r22, 0
 522:	04 c0       	rjmp	.+8      	; 0x52c <__fp_round+0x20>
 524:	6f 5f       	subi	r22, 0xFF	; 255
 526:	7f 4f       	sbci	r23, 0xFF	; 255
 528:	8f 4f       	sbci	r24, 0xFF	; 255
 52a:	9f 4f       	sbci	r25, 0xFF	; 255
 52c:	08 95       	ret

0000052e <__fp_split3>:
 52e:	57 fd       	sbrc	r21, 7
 530:	90 58       	subi	r25, 0x80	; 128
 532:	44 0f       	add	r20, r20
 534:	55 1f       	adc	r21, r21
 536:	59 f0       	breq	.+22     	; 0x54e <__fp_splitA+0x10>
 538:	5f 3f       	cpi	r21, 0xFF	; 255
 53a:	71 f0       	breq	.+28     	; 0x558 <__fp_splitA+0x1a>
 53c:	47 95       	ror	r20

0000053e <__fp_splitA>:
 53e:	88 0f       	add	r24, r24
 540:	97 fb       	bst	r25, 7
 542:	99 1f       	adc	r25, r25
 544:	61 f0       	breq	.+24     	; 0x55e <__fp_splitA+0x20>
 546:	9f 3f       	cpi	r25, 0xFF	; 255
 548:	79 f0       	breq	.+30     	; 0x568 <__fp_splitA+0x2a>
 54a:	87 95       	ror	r24
 54c:	08 95       	ret
 54e:	12 16       	cp	r1, r18
 550:	13 06       	cpc	r1, r19
 552:	14 06       	cpc	r1, r20
 554:	55 1f       	adc	r21, r21
 556:	f2 cf       	rjmp	.-28     	; 0x53c <__fp_split3+0xe>
 558:	46 95       	lsr	r20
 55a:	f1 df       	rcall	.-30     	; 0x53e <__fp_splitA>
 55c:	08 c0       	rjmp	.+16     	; 0x56e <__fp_splitA+0x30>
 55e:	16 16       	cp	r1, r22
 560:	17 06       	cpc	r1, r23
 562:	18 06       	cpc	r1, r24
 564:	99 1f       	adc	r25, r25
 566:	f1 cf       	rjmp	.-30     	; 0x54a <__fp_splitA+0xc>
 568:	86 95       	lsr	r24
 56a:	71 05       	cpc	r23, r1
 56c:	61 05       	cpc	r22, r1
 56e:	08 94       	sec
 570:	08 95       	ret

00000572 <__fp_zero>:
 572:	e8 94       	clt

00000574 <__fp_szero>:
 574:	bb 27       	eor	r27, r27
 576:	66 27       	eor	r22, r22
 578:	77 27       	eor	r23, r23
 57a:	cb 01       	movw	r24, r22
 57c:	97 f9       	bld	r25, 7
 57e:	08 95       	ret

00000580 <__mulsf3>:
 580:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__mulsf3x>
 584:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_round>
 588:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__fp_pscA>
 58c:	38 f0       	brcs	.+14     	; 0x59c <__mulsf3+0x1c>
 58e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fp_pscB>
 592:	20 f0       	brcs	.+8      	; 0x59c <__mulsf3+0x1c>
 594:	95 23       	and	r25, r21
 596:	11 f0       	breq	.+4      	; 0x59c <__mulsf3+0x1c>
 598:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_inf>
 59c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__fp_nan>
 5a0:	11 24       	eor	r1, r1
 5a2:	0c 94 ba 02 	jmp	0x574	; 0x574 <__fp_szero>

000005a6 <__mulsf3x>:
 5a6:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_split3>
 5aa:	70 f3       	brcs	.-36     	; 0x588 <__mulsf3+0x8>

000005ac <__mulsf3_pse>:
 5ac:	95 9f       	mul	r25, r21
 5ae:	c1 f3       	breq	.-16     	; 0x5a0 <__mulsf3+0x20>
 5b0:	95 0f       	add	r25, r21
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	55 1f       	adc	r21, r21
 5b6:	62 9f       	mul	r22, r18
 5b8:	f0 01       	movw	r30, r0
 5ba:	72 9f       	mul	r23, r18
 5bc:	bb 27       	eor	r27, r27
 5be:	f0 0d       	add	r31, r0
 5c0:	b1 1d       	adc	r27, r1
 5c2:	63 9f       	mul	r22, r19
 5c4:	aa 27       	eor	r26, r26
 5c6:	f0 0d       	add	r31, r0
 5c8:	b1 1d       	adc	r27, r1
 5ca:	aa 1f       	adc	r26, r26
 5cc:	64 9f       	mul	r22, r20
 5ce:	66 27       	eor	r22, r22
 5d0:	b0 0d       	add	r27, r0
 5d2:	a1 1d       	adc	r26, r1
 5d4:	66 1f       	adc	r22, r22
 5d6:	82 9f       	mul	r24, r18
 5d8:	22 27       	eor	r18, r18
 5da:	b0 0d       	add	r27, r0
 5dc:	a1 1d       	adc	r26, r1
 5de:	62 1f       	adc	r22, r18
 5e0:	73 9f       	mul	r23, r19
 5e2:	b0 0d       	add	r27, r0
 5e4:	a1 1d       	adc	r26, r1
 5e6:	62 1f       	adc	r22, r18
 5e8:	83 9f       	mul	r24, r19
 5ea:	a0 0d       	add	r26, r0
 5ec:	61 1d       	adc	r22, r1
 5ee:	22 1f       	adc	r18, r18
 5f0:	74 9f       	mul	r23, r20
 5f2:	33 27       	eor	r19, r19
 5f4:	a0 0d       	add	r26, r0
 5f6:	61 1d       	adc	r22, r1
 5f8:	23 1f       	adc	r18, r19
 5fa:	84 9f       	mul	r24, r20
 5fc:	60 0d       	add	r22, r0
 5fe:	21 1d       	adc	r18, r1
 600:	82 2f       	mov	r24, r18
 602:	76 2f       	mov	r23, r22
 604:	6a 2f       	mov	r22, r26
 606:	11 24       	eor	r1, r1
 608:	9f 57       	subi	r25, 0x7F	; 127
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	9a f0       	brmi	.+38     	; 0x634 <__mulsf3_pse+0x88>
 60e:	f1 f0       	breq	.+60     	; 0x64c <__mulsf3_pse+0xa0>
 610:	88 23       	and	r24, r24
 612:	4a f0       	brmi	.+18     	; 0x626 <__mulsf3_pse+0x7a>
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	bb 1f       	adc	r27, r27
 61a:	66 1f       	adc	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	88 1f       	adc	r24, r24
 620:	91 50       	subi	r25, 0x01	; 1
 622:	50 40       	sbci	r21, 0x00	; 0
 624:	a9 f7       	brne	.-22     	; 0x610 <__mulsf3_pse+0x64>
 626:	9e 3f       	cpi	r25, 0xFE	; 254
 628:	51 05       	cpc	r21, r1
 62a:	80 f0       	brcs	.+32     	; 0x64c <__mulsf3_pse+0xa0>
 62c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_inf>
 630:	0c 94 ba 02 	jmp	0x574	; 0x574 <__fp_szero>
 634:	5f 3f       	cpi	r21, 0xFF	; 255
 636:	e4 f3       	brlt	.-8      	; 0x630 <__mulsf3_pse+0x84>
 638:	98 3e       	cpi	r25, 0xE8	; 232
 63a:	d4 f3       	brlt	.-12     	; 0x630 <__mulsf3_pse+0x84>
 63c:	86 95       	lsr	r24
 63e:	77 95       	ror	r23
 640:	67 95       	ror	r22
 642:	b7 95       	ror	r27
 644:	f7 95       	ror	r31
 646:	e7 95       	ror	r30
 648:	9f 5f       	subi	r25, 0xFF	; 255
 64a:	c1 f7       	brne	.-16     	; 0x63c <__mulsf3_pse+0x90>
 64c:	fe 2b       	or	r31, r30
 64e:	88 0f       	add	r24, r24
 650:	91 1d       	adc	r25, r1
 652:	96 95       	lsr	r25
 654:	87 95       	ror	r24
 656:	97 f9       	bld	r25, 7
 658:	08 95       	ret

0000065a <_exit>:
 65a:	f8 94       	cli

0000065c <__stop_program>:
 65c:	ff cf       	rjmp	.-2      	; 0x65c <__stop_program>
