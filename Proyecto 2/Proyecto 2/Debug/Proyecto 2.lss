
Proyecto 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000abc  00000b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000abc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080012a  0080012a  00000b7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec0  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087f  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000920  00000000  00000000  00002423  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00002d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059a  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003da  00000000  00000000  0000354a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 33       	cpi	r26, 0x33	; 51
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 09 02 	call	0x412	; 0x412 <main>
  9e:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <INIT_TIMER2>:
}

void INIT_TIMER2(){
	

	DDRB |= (1 << DDB3);	//Setear bit 3 del puerto B como salida
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD3);	//Setear bit 3 del puerto D como salida
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	8a b9       	out	0x0a, r24	; 10
		
	//CONFIGURACIÓN DEL TIMER 2 PARA FAST PWM CON OCR1A COMO TOP
	TCCR2A = 0;
  b2:	e0 eb       	ldi	r30, 0xB0	; 176
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	TCCR2A |= (1 << COM2A1);	//no invertido para la salida 2A
  b8:	80 81       	ld	r24, Z
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2B1);	//no invertido para la salida 2B
  be:	80 81       	ld	r24, Z
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	80 83       	st	Z, r24
		
		
	//Modo fast PMW (MODO 3)
	TCCR2A |= (1 << WGM21)|(1 << WGM20);
  c4:	80 81       	ld	r24, Z
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	80 83       	st	Z, r24
	TCCR2B = 0;
  ca:	e1 eb       	ldi	r30, 0xB1	; 177
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
	TCCR2B |= (1<<CS22)|(1<<CS20);	//Prescaler de 128
  d0:	80 81       	ld	r24, Z
  d2:	85 60       	ori	r24, 0x05	; 5
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <updateDutyCycle2A>:
	
		
}

void  updateDutyCycle2A(uint8_t duty){
	OCR2A = duty;
  d8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  dc:	08 95       	ret

000000de <updateDutyCycle2b>:
}

void  updateDutyCycle2b(uint8_t duty){
	OCR2B = duty;
  de:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  e2:	08 95       	ret

000000e4 <INIT_PIN_CHANGE>:
}

void INIT_PIN_CHANGE()
{//Habilitar interrupciones de pin change
	PCICR |= (1 << PCIE1)|(1 << PCIE0);     // Habilitar interrupción de cambio de estado
  e4:	e8 e6       	ldi	r30, 0x68	; 104
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	83 60       	ori	r24, 0x03	; 3
  ec:	80 83       	st	Z, r24
	// Habilita interrupción para bit 3, 2, 1, 0 deL Puerto C
	PCMSK1 |= (1 << PCINT11)|(1 << PCINT10)|(1 << PCINT9)|(1 << PCINT8); 
  ee:	ec e6       	ldi	r30, 0x6C	; 108
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8f 60       	ori	r24, 0x0F	; 15
  f6:	80 83       	st	Z, r24
	
	//Habilitar interrupción para  bit 4 del puerto B
	PCMSK0 |= (1 << PCINT4);
  f8:	eb e6       	ldi	r30, 0x6B	; 107
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 61       	ori	r24, 0x10	; 16
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <initUART>:
}

void initUART(){
	//Configurar pines PD0 (TX) y PD1 (TX)
	DDRD |= (1<<DDD1);
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<DDD0);
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	8e 7f       	andi	r24, 0xFE	; 254
 10e:	8a b9       	out	0x0a, r24	; 10
	
	//Configurar UCSR0A
	UCSR0A=0;
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	10 82       	st	Z, r1
	UCSR0A= (1 << U2X0);	//Double the USART transmission Speed
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	80 83       	st	Z, r24
	//Configuración UCSR0B: Habililitndo la interrupción al escribir:
	//-Habilibitar recepción
	//-Habilitación de transmisión
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)| (1<< TXEN0);
 11a:	e1 ec       	ldi	r30, 0xC1	; 193
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	88 69       	ori	r24, 0x98	; 152
 122:	80 83       	st	Z, r24
	//Configurar UCSR0C
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 124:	e2 ec       	ldi	r30, 0xC2	; 194
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	86 60       	ori	r24, 0x06	; 6
 12c:	80 83       	st	Z, r24
	//Configurar UBRR0: UBRR0 = 12 -> 9600  @ 1MHz
	UBRR0 = 12;
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 136:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 13a:	08 95       	ret

0000013c <INIT_ADC>:
}


void INIT_ADC(){
	ADMUX = 0;	//Apagar todo
 13c:	ec e7       	ldi	r30, 0x7C	; 124
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	10 82       	st	Z, r1
	
	//Voltaje de referencia 5V
	ADMUX |=(1<<REFS0);
 142:	80 81       	ld	r24, Z
 144:	80 64       	ori	r24, 0x40	; 64
 146:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); //orientación (izquierda)
 148:	80 81       	ld	r24, Z
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	80 83       	st	Z, r24
	ADCSRA = 0;	//Apagar todo
 14e:	ea e7       	ldi	r30, 0x7A	; 122
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	10 82       	st	Z, r1
	ADCSRA |=(1<<ADPS1)	| (1 << ADPS0); //Configuración del presacaler 8
 154:	80 81       	ld	r24, Z
 156:	83 60       	ori	r24, 0x03	; 3
 158:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//Habilitación de interrupciones
 15a:	80 81       	ld	r24, Z
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	//Habilitar ADS
 160:	80 81       	ld	r24, Z
 162:	80 68       	ori	r24, 0x80	; 128
 164:	80 83       	st	Z, r24
 166:	08 95       	ret

00000168 <setup>:
		
	}
}

void setup(){
	cli();	//Desabilitar interrupciones
 168:	f8 94       	cli
	INIT_TIMER2();
 16a:	0e 94 53 00 	call	0xa6	; 0xa6 <INIT_TIMER2>
	INIT_ADC();
 16e:	0e 94 9e 00 	call	0x13c	; 0x13c <INIT_ADC>
	initPWM1A();
 172:	0e 94 95 03 	call	0x72a	; 0x72a <initPWM1A>
	initPWM1B();
 176:	0e 94 b6 03 	call	0x76c	; 0x76c <initPWM1B>
	
	INIT_PIN_CHANGE();
 17a:	0e 94 72 00 	call	0xe4	; 0xe4 <INIT_PIN_CHANGE>
	initUART();
 17e:	0e 94 82 00 	call	0x104	; 0x104 <initUART>
	//contador==1;
	

	//Configurar los puertos de salida (LEDS)
	DDRB |= (1 << PORTB0)|(1 << PORTB4);
 182:	84 b1       	in	r24, 0x04	; 4
 184:	81 61       	ori	r24, 0x11	; 17
 186:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<< PORTB0)|(1<< PORTB4));
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	8e 7e       	andi	r24, 0xEE	; 238
 18c:	85 b9       	out	0x05, r24	; 5
	DDRD |= (1 << PORTD7)|(1 << PORTD6);
 18e:	8a b1       	in	r24, 0x0a	; 10
 190:	80 6c       	ori	r24, 0xC0	; 192
 192:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << PORTD7)|(PORTD6));
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	89 77       	andi	r24, 0x79	; 121
 198:	8b b9       	out	0x0b, r24	; 11
	//Configurar el bit 3 del puerto C como entrada
	DDRC &= ~((1 << PORTC3)|(1 << PORTC2)|(1 << PORTC1)|(1 << PORTC0));
 19a:	87 b1       	in	r24, 0x07	; 7
 19c:	80 7f       	andi	r24, 0xF0	; 240
 19e:	87 b9       	out	0x07, r24	; 7
	PORTC |= ((1 << PORTC3)|(1 << PORTC2)|(1 << PORTC1)|(1 << PORTC0));
 1a0:	88 b1       	in	r24, 0x08	; 8
 1a2:	8f 60       	ori	r24, 0x0F	; 15
 1a4:	88 b9       	out	0x08, r24	; 8
	//DDRB &= ~(1 << PORTB4);
	//PORTB |= (1 << PORTB4);//Pull up activado
	
	CLKPR = (1 << CLKPCE); //Habilita cambios de prescaler
 1a6:	e1 e6       	ldi	r30, 0x61	; 97
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2);	// 1MHz
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	80 83       	st	Z, r24
	sei();		//Habilita cambios de interrupción
 1b2:	78 94       	sei
	
	ADCSRA |= (1 << ADSC); // Iniciar primera conversión
 1b4:	ea e7       	ldi	r30, 0x7A	; 122
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 64       	ori	r24, 0x40	; 64
 1bc:	80 83       	st	Z, r24
 1be:	08 95       	ret

000001c0 <writeEEPROM>:
	ADCSRA |= (1 << ADEN);	//Habilitar ADS
}

void writeEEPROM(uint8_t dato, uint16_t direccion){
	//Esperar a que termine la escritura anterior
	while (EECR & (1 << EEPE));
 1c0:	f9 99       	sbic	0x1f, 1	; 31
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <writeEEPROM>
	//Asignar dirección de escritura
	EEAR = direccion;
 1c4:	72 bd       	out	0x22, r23	; 34
 1c6:	61 bd       	out	0x21, r22	; 33
	//asignar dato a "escribir"
	EEDR = dato;
 1c8:	80 bd       	out	0x20, r24	; 32
	//Setear en 1 el "master write enable"
	EECR |= (1 << EEMPE);
 1ca:	8f b3       	in	r24, 0x1f	; 31
 1cc:	84 60       	ori	r24, 0x04	; 4
 1ce:	8f bb       	out	0x1f, r24	; 31
	//Empezar a escribir
	EECR |= (1 << EEPE);
 1d0:	8f b3       	in	r24, 0x1f	; 31
 1d2:	82 60       	ori	r24, 0x02	; 2
 1d4:	8f bb       	out	0x1f, r24	; 31
 1d6:	08 95       	ret

000001d8 <readEEPROM>:
}

uint8_t readEEPROM(uint16_t direccion){
	//Esperar a que termine la escritura anterior
	while (EECR & (1 << EEPE));
 1d8:	f9 99       	sbic	0x1f, 1	; 31
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <readEEPROM>
	//Asignar dirección de escritura
	EEAR = direccion;
 1dc:	92 bd       	out	0x22, r25	; 34
 1de:	81 bd       	out	0x21, r24	; 33
	//Empezara a leer
	EECR |= (1 << EERE);
 1e0:	8f b3       	in	r24, 0x1f	; 31
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	8f bb       	out	0x1f, r24	; 31
	return EEDR;
 1e6:	80 b5       	in	r24, 0x20	; 32
}
 1e8:	08 95       	ret

000001ea <writeChar>:

void writeChar(char caracter){
	while ( (UCSR0A & (1<<UDRE0))==0){
 1ea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1ee:	95 ff       	sbrs	r25, 5
 1f0:	fc cf       	rjmp	.-8      	; 0x1ea <writeChar>
		
	}

	UDR0=caracter;
 1f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1f6:	08 95       	ret

000001f8 <writeString>:
	
}

void writeString(char* texto)
{
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; *(texto+i) !='\0'; i++)
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	03 c0       	rjmp	.+6      	; 0x20a <writeString+0x12>
	{
		writeChar(*(texto+i));
 204:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeChar>
	
}

void writeString(char* texto)
{
	for(uint8_t i = 0; *(texto+i) !='\0'; i++)
 208:	cf 5f       	subi	r28, 0xFF	; 255
 20a:	f8 01       	movw	r30, r16
 20c:	ec 0f       	add	r30, r28
 20e:	f1 1d       	adc	r31, r1
 210:	80 81       	ld	r24, Z
 212:	81 11       	cpse	r24, r1
 214:	f7 cf       	rjmp	.-18     	; 0x204 <writeString+0xc>
	{
		writeChar(*(texto+i));
	}
	
}
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	08 95       	ret

0000021e <savepositions_servo>:

void savepositions_servo(){
	//Verificar si se presionó el botón para guardar posición
	if (indicador_acb==0b00000001){
 21e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <indicador_acb>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	09 f0       	breq	.+2      	; 0x228 <savepositions_servo+0xa>
 226:	66 c0       	rjmp	.+204    	; 0x2f4 <savepositions_servo+0xd6>
		
		writeEEPROM(ADC1, 0x00 + indicador_no_posicion*4);
 228:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <__data_end>
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ADC1>
 23a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <writeEEPROM>
		writeEEPROM(ADC2, 0x01 + indicador_no_posicion*4);
 23e:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <__data_end>
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	6f 5f       	subi	r22, 0xFF	; 255
 24e:	7f 4f       	sbci	r23, 0xFF	; 255
 250:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <ADC2>
 254:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <writeEEPROM>
		writeEEPROM(dutyCycle3, 0x02 + indicador_no_posicion*4);
 258:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <__data_end>
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	66 0f       	add	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	6e 5f       	subi	r22, 0xFE	; 254
 268:	7f 4f       	sbci	r23, 0xFF	; 255
 26a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dutyCycle3>
 26e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <writeEEPROM>
		writeEEPROM(dutyCycle4, 0x03 + indicador_no_posicion*4);
 272:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <__data_end>
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	6d 5f       	subi	r22, 0xFD	; 253
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 288:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <writeEEPROM>
		
		writeChar('.');
 28c:	8e e2       	ldi	r24, 0x2E	; 46
 28e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeChar>
		writeChar(dutyCycle1);
 292:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <dutyCycle1>
 296:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeChar>
		writeChar('.');
 29a:	8e e2       	ldi	r24, 0x2E	; 46
 29c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeChar>
		writeChar(dutyCycle2);
 2a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dutyCycle2>
 2a4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeChar>
		writeChar('.');
 2a8:	8e e2       	ldi	r24, 0x2E	; 46
 2aa:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeChar>
		writeChar(dutyCycle3);
 2ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dutyCycle3>
 2b2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeChar>
		writeChar('.');
 2b6:	8e e2       	ldi	r24, 0x2E	; 46
 2b8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeChar>
		writeChar(dutyCycle4);
 2bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeChar>
			
		writeString("Guardada posición ");
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <writeString>
		writeChar('1' + indicador_no_posicion); // Mostrar posición 1, 2, 3, 4
 2cc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 2d0:	8f 5c       	subi	r24, 0xCF	; 207
 2d2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeChar>
		writeString("\r\n");
 2d6:	87 e1       	ldi	r24, 0x17	; 23
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <writeString>
		
		indicador_no_posicion++;
 2de:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
		if (indicador_no_posicion >=4){
 2e8:	84 30       	cpi	r24, 0x04	; 4
 2ea:	10 f0       	brcs	.+4      	; 0x2f0 <savepositions_servo+0xd2>
			indicador_no_posicion=0;
 2ec:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
		}
	 indicador_acb=0;	//Apagar la bandera 
 2f0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <indicador_acb>
 2f4:	08 95       	ret

000002f6 <cargarposicion>:
		cargarposicion(3);
	}
	indicador_acb=0; //Apagar bandera
}

void cargarposicion(uint8_t index){
 2f6:	ff 92       	push	r15
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	f8 2e       	mov	r15, r24
	
	uint8_t adc1 = readEEPROM(0x00 + index*4);
 302:	c8 2f       	mov	r28, r24
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	cc 0f       	add	r28, r28
 308:	dd 1f       	adc	r29, r29
 30a:	cc 0f       	add	r28, r28
 30c:	dd 1f       	adc	r29, r29
 30e:	ce 01       	movw	r24, r28
 310:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <readEEPROM>
 314:	08 2f       	mov	r16, r24
	uint8_t adc2 = readEEPROM(0x01 + index*4);
 316:	ce 01       	movw	r24, r28
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <readEEPROM>
 31e:	18 2f       	mov	r17, r24
	dutyCycle3 = readEEPROM(0x02 + index*4);
 320:	ce 01       	movw	r24, r28
 322:	02 96       	adiw	r24, 0x02	; 2
 324:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <readEEPROM>
 328:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dutyCycle3>
	dutyCycle4 = readEEPROM(0x03 + index*4);
 32c:	ce 01       	movw	r24, r28
 32e:	03 96       	adiw	r24, 0x03	; 3
 330:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <readEEPROM>
 334:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	dutyCycle1 = (adc1 * (188.0 / 255.0)) + 69.0;
 338:	60 2f       	mov	r22, r16
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__floatsisf>
 344:	2d eb       	ldi	r18, 0xBD	; 189
 346:	3c eb       	ldi	r19, 0xBC	; 188
 348:	4c e3       	ldi	r20, 0x3C	; 60
 34a:	5f e3       	ldi	r21, 0x3F	; 63
 34c:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	4a e8       	ldi	r20, 0x8A	; 138
 356:	52 e4       	ldi	r21, 0x42	; 66
 358:	0e 94 c6 03 	call	0x78c	; 0x78c <__addsf3>
 35c:	0e 94 32 04 	call	0x864	; 0x864 <__fixunssfsi>
 360:	c6 2f       	mov	r28, r22
 362:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <dutyCycle1>
	dutyCycle2 = (adc2 * (188.0 / 255.0)) + 69.0;
 366:	61 2f       	mov	r22, r17
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__floatsisf>
 372:	2d eb       	ldi	r18, 0xBD	; 189
 374:	3c eb       	ldi	r19, 0xBC	; 188
 376:	4c e3       	ldi	r20, 0x3C	; 60
 378:	5f e3       	ldi	r21, 0x3F	; 63
 37a:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 37e:	20 e0       	ldi	r18, 0x00	; 0
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	4a e8       	ldi	r20, 0x8A	; 138
 384:	52 e4       	ldi	r21, 0x42	; 66
 386:	0e 94 c6 03 	call	0x78c	; 0x78c <__addsf3>
 38a:	0e 94 32 04 	call	0x864	; 0x864 <__fixunssfsi>
 38e:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <dutyCycle2>
	
	// Actualizar todos los PWM
	updateDutyCycle1(dutyCycle1);
 392:	8c 2f       	mov	r24, r28
 394:	0e 94 b0 03 	call	0x760	; 0x760 <updateDutyCycle1>
	updateDutyCycle1B(dutyCycle2);
 398:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dutyCycle2>
 39c:	0e 94 bf 03 	call	0x77e	; 0x77e <updateDutyCycle1B>
	updateDutyCycle2A(dutyCycle3);
 3a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dutyCycle3>
 3a4:	0e 94 6c 00 	call	0xd8	; 0xd8 <updateDutyCycle2A>
	updateDutyCycle2b(dutyCycle4);
 3a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ac:	0e 94 6f 00 	call	0xde	; 0xde <updateDutyCycle2b>
	 
	writeString("posición leída ");
 3b0:	8a e1       	ldi	r24, 0x1A	; 26
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <writeString>
	writeChar('1' + index); // Mostrar posición 1, 2, 3, 4
 3b8:	81 e3       	ldi	r24, 0x31	; 49
 3ba:	8f 0d       	add	r24, r15
 3bc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeChar>
	writeString("\r\n");
 3c0:	87 e1       	ldi	r24, 0x17	; 23
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <writeString>
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	08 95       	ret

000003d4 <readpositions_servo>:
	}
	
}

void readpositions_servo(){
	if(indicador_acb==0b00000001){
 3d4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <indicador_acb>
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	19 f4       	brne	.+6      	; 0x3e2 <readpositions_servo+0xe>
		cargarposicion(0);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <cargarposicion>
		}
		
	if(indicador_acb==0b00000010){
 3e2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <indicador_acb>
 3e6:	82 30       	cpi	r24, 0x02	; 2
 3e8:	19 f4       	brne	.+6      	; 0x3f0 <readpositions_servo+0x1c>
		cargarposicion(1);
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <cargarposicion>
	}
	
	if(indicador_acb==0b00000100){
 3f0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <indicador_acb>
 3f4:	84 30       	cpi	r24, 0x04	; 4
 3f6:	19 f4       	brne	.+6      	; 0x3fe <readpositions_servo+0x2a>
		cargarposicion(2);
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <cargarposicion>
	}
	
	if(indicador_acb==0b00001000){
 3fe:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <indicador_acb>
 402:	88 30       	cpi	r24, 0x08	; 8
 404:	19 f4       	brne	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		cargarposicion(3);
 406:	83 e0       	ldi	r24, 0x03	; 3
 408:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <cargarposicion>
	}
	indicador_acb=0; //Apagar bandera
 40c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <indicador_acb>
 410:	08 95       	ret

00000412 <main>:



int main(void)
{
	setup();
 412:	0e 94 b4 00 	call	0x168	; 0x168 <setup>
	//writeEEPROM('B', 0x00);
	uint8_t dire = 0x00;
	uint8_t temporal = readEEPROM(dire);
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <readEEPROM>

int main(void)
{
	setup();
	//writeEEPROM('B', 0x00);
	uint8_t dire = 0x00;
 41e:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t temporal = readEEPROM(dire);
	while (temporal != 0xFF){
 420:	07 c0       	rjmp	.+14     	; 0x430 <main+0x1e>
		writeChar(temporal);
 422:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeChar>
		//writeEEPROM(0xFF,dire+0x00);
		dire++;
 426:	cf 5f       	subi	r28, 0xFF	; 255
		temporal = readEEPROM(dire);
 428:	8c 2f       	mov	r24, r28
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <readEEPROM>
{
	setup();
	//writeEEPROM('B', 0x00);
	uint8_t dire = 0x00;
	uint8_t temporal = readEEPROM(dire);
	while (temporal != 0xFF){
 430:	8f 3f       	cpi	r24, 0xFF	; 255
 432:	b9 f7       	brne	.-18     	; 0x422 <main+0x10>
	}
	
	while (1)
	{	
		//Modo 1: Modo manual y guardar posiciones
		if(MODO==0b00000001){
 434:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <MODO>
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	59 f4       	brne	.+22     	; 0x452 <main+0x40>
			PORTD &= ~(1 << PORTD7);
 43c:	8b b1       	in	r24, 0x0b	; 11
 43e:	8f 77       	andi	r24, 0x7F	; 127
 440:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~((1 << PORTB0)|(1 << PORTB4));
 442:	85 b1       	in	r24, 0x05	; 5
 444:	8e 7e       	andi	r24, 0xEE	; 238
 446:	85 b9       	out	0x05, r24	; 5
			PORTD |= (1 << PORTD6);
 448:	8b b1       	in	r24, 0x0b	; 11
 44a:	80 64       	ori	r24, 0x40	; 64
 44c:	8b b9       	out	0x0b, r24	; 11
			savepositions_servo();
 44e:	0e 94 0f 01 	call	0x21e	; 0x21e <savepositions_servo>
		}
		
		//Si se está en modo dos verificar al función de guardar posiciones
		if(MODO==0b00000010){
 452:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <MODO>
 456:	82 30       	cpi	r24, 0x02	; 2
 458:	59 f4       	brne	.+22     	; 0x470 <main+0x5e>
			PORTD &= ~(1 << PORTD6);
 45a:	8b b1       	in	r24, 0x0b	; 11
 45c:	8f 7b       	andi	r24, 0xBF	; 191
 45e:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~((1 << PORTB0)|(1 << PORTB4));
 460:	85 b1       	in	r24, 0x05	; 5
 462:	8e 7e       	andi	r24, 0xEE	; 238
 464:	85 b9       	out	0x05, r24	; 5
			PORTD |= (1 << PORTD7);
 466:	8b b1       	in	r24, 0x0b	; 11
 468:	80 68       	ori	r24, 0x80	; 128
 46a:	8b b9       	out	0x0b, r24	; 11
			readpositions_servo();
 46c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <readpositions_servo>
		}
		
		//Si la está en modo 3: Verifica la función de leer posiciones para cada motor
		if (MODO==0b00000100){
 470:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <MODO>
 474:	84 30       	cpi	r24, 0x04	; 4
 476:	f1 f6       	brne	.-68     	; 0x434 <main+0x22>
			PORTD &= ~((1 << PORTD6)|(1 << PORTD7));
 478:	8b b1       	in	r24, 0x0b	; 11
 47a:	8f 73       	andi	r24, 0x3F	; 63
 47c:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(1 << PORTB4);
 47e:	85 b1       	in	r24, 0x05	; 5
 480:	8f 7e       	andi	r24, 0xEF	; 239
 482:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB0);
 484:	85 b1       	in	r24, 0x05	; 5
 486:	81 60       	ori	r24, 0x01	; 1
 488:	85 b9       	out	0x05, r24	; 5
 48a:	d4 cf       	rjmp	.-88     	; 0x434 <main+0x22>

0000048c <__vector_21>:
	writeString("\r\n");
}
/*************VECTOR DE INTERRUPCIÓN************/

ISR(ADC_vect)
{
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	2f 93       	push	r18
 498:	3f 93       	push	r19
 49a:	4f 93       	push	r20
 49c:	5f 93       	push	r21
 49e:	6f 93       	push	r22
 4a0:	7f 93       	push	r23
 4a2:	8f 93       	push	r24
 4a4:	9f 93       	push	r25
 4a6:	af 93       	push	r26
 4a8:	bf 93       	push	r27
 4aa:	ef 93       	push	r30
 4ac:	ff 93       	push	r31
	if (MODO == 0b00000001){
 4ae:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <MODO>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <__vector_21+0x2c>
 4b6:	ab c0       	rjmp	.+342    	; 0x60e <__vector_21+0x182>
		POT++;
 4b8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <POT>
 4bc:	8f 5f       	subi	r24, 0xFF	; 255
 4be:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <POT>
		
		switch (POT){
 4c2:	83 30       	cpi	r24, 0x03	; 3
 4c4:	09 f4       	brne	.+2      	; 0x4c8 <__vector_21+0x3c>
 4c6:	57 c0       	rjmp	.+174    	; 0x576 <__vector_21+0xea>
 4c8:	28 f4       	brcc	.+10     	; 0x4d4 <__vector_21+0x48>
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	51 f0       	breq	.+20     	; 0x4e2 <__vector_21+0x56>
 4ce:	82 30       	cpi	r24, 0x02	; 2
 4d0:	69 f1       	breq	.+90     	; 0x52c <__vector_21+0xa0>
 4d2:	9d c0       	rjmp	.+314    	; 0x60e <__vector_21+0x182>
 4d4:	84 30       	cpi	r24, 0x04	; 4
 4d6:	09 f4       	brne	.+2      	; 0x4da <__vector_21+0x4e>
 4d8:	73 c0       	rjmp	.+230    	; 0x5c0 <__vector_21+0x134>
 4da:	85 30       	cpi	r24, 0x05	; 5
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <__vector_21+0x54>
 4de:	95 c0       	rjmp	.+298    	; 0x60a <__vector_21+0x17e>
 4e0:	96 c0       	rjmp	.+300    	; 0x60e <__vector_21+0x182>
			case 1:
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));  // Limpiar bit
 4e2:	ec e7       	ldi	r30, 0x7C	; 124
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	80 81       	ld	r24, Z
 4e8:	88 7f       	andi	r24, 0xF8	; 248
 4ea:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX2) | (1<<MUX1);//Selección de canal Bit 6 del puerto C
 4ec:	80 81       	ld	r24, Z
 4ee:	86 60       	ori	r24, 0x06	; 6
 4f0:	80 83       	st	Z, r24
			ADC1=ADCH;
 4f2:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4f6:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <ADC1>
			dutyCycle1 = (ADC1 * (186.0 / 255.0)) + 68.0;
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__floatsisf>
 504:	2b eb       	ldi	r18, 0xBB	; 187
 506:	3a eb       	ldi	r19, 0xBA	; 186
 508:	4a e3       	ldi	r20, 0x3A	; 58
 50a:	5f e3       	ldi	r21, 0x3F	; 63
 50c:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	48 e8       	ldi	r20, 0x88	; 136
 516:	52 e4       	ldi	r21, 0x42	; 66
 518:	0e 94 c6 03 	call	0x78c	; 0x78c <__addsf3>
 51c:	0e 94 32 04 	call	0x864	; 0x864 <__fixunssfsi>
 520:	86 2f       	mov	r24, r22
 522:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <dutyCycle1>
			updateDutyCycle1(dutyCycle1); // Actualizar PWM
 526:	0e 94 b0 03 	call	0x760	; 0x760 <updateDutyCycle1>
			break;
 52a:	71 c0       	rjmp	.+226    	; 0x60e <__vector_21+0x182>
			
			case 2:
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));  // Limpiar bit
 52c:	ec e7       	ldi	r30, 0x7C	; 124
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	88 7f       	andi	r24, 0xF8	; 248
 534:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Selección de canal Bit 7 del puerto C
 536:	80 81       	ld	r24, Z
 538:	87 60       	ori	r24, 0x07	; 7
 53a:	80 83       	st	Z, r24
			ADC2=ADCH;
 53c:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 540:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <ADC2>
			dutyCycle2 = (ADC2 *  (186.0 / 255.0)) + 68.0;
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__floatsisf>
 54e:	2b eb       	ldi	r18, 0xBB	; 187
 550:	3a eb       	ldi	r19, 0xBA	; 186
 552:	4a e3       	ldi	r20, 0x3A	; 58
 554:	5f e3       	ldi	r21, 0x3F	; 63
 556:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	48 e8       	ldi	r20, 0x88	; 136
 560:	52 e4       	ldi	r21, 0x42	; 66
 562:	0e 94 c6 03 	call	0x78c	; 0x78c <__addsf3>
 566:	0e 94 32 04 	call	0x864	; 0x864 <__fixunssfsi>
 56a:	86 2f       	mov	r24, r22
 56c:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <dutyCycle2>
			updateDutyCycle1B(dutyCycle2); // Actualizar PWM
 570:	0e 94 bf 03 	call	0x77e	; 0x77e <updateDutyCycle1B>
			break;
 574:	4c c0       	rjmp	.+152    	; 0x60e <__vector_21+0x182>
			
			case 3:
			
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));  // Limpiar bit MUX0 primero
 576:	ec e7       	ldi	r30, 0x7C	; 124
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	88 7f       	andi	r24, 0xF8	; 248
 57e:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX2) | (1<<MUX0);//Selección de canal Bit 5 del puerto C
 580:	80 81       	ld	r24, Z
 582:	85 60       	ori	r24, 0x05	; 5
 584:	80 83       	st	Z, r24
			ADC3=ADCH;
 586:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 58a:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <ADC3>
			dutyCycle3 = (ADC3 * (24.0 / 255.0)) + 2.0;
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__floatsisf>
 598:	21 ec       	ldi	r18, 0xC1	; 193
 59a:	30 ec       	ldi	r19, 0xC0	; 192
 59c:	40 ec       	ldi	r20, 0xC0	; 192
 59e:	5d e3       	ldi	r21, 0x3D	; 61
 5a0:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 5a4:	20 e0       	ldi	r18, 0x00	; 0
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	50 e4       	ldi	r21, 0x40	; 64
 5ac:	0e 94 c6 03 	call	0x78c	; 0x78c <__addsf3>
 5b0:	0e 94 32 04 	call	0x864	; 0x864 <__fixunssfsi>
 5b4:	86 2f       	mov	r24, r22
 5b6:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <dutyCycle3>
			updateDutyCycle2A(dutyCycle3); // Actualizar PWM
 5ba:	0e 94 6c 00 	call	0xd8	; 0xd8 <updateDutyCycle2A>
			break;
 5be:	27 c0       	rjmp	.+78     	; 0x60e <__vector_21+0x182>
			
			case 4:
			
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));  // Limpiar bit MUX0 primero
 5c0:	ec e7       	ldi	r30, 0x7C	; 124
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	88 7f       	andi	r24, 0xF8	; 248
 5c8:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX2);//Selección de canal Bit 4 del puerto C
 5ca:	80 81       	ld	r24, Z
 5cc:	84 60       	ori	r24, 0x04	; 4
 5ce:	80 83       	st	Z, r24
			ADC4=ADCH;
 5d0:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 5d4:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <ADC4>
			dutyCycle4 = (ADC4 * (24.0 / 255.0)) + 2.0;
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__floatsisf>
 5e2:	21 ec       	ldi	r18, 0xC1	; 193
 5e4:	30 ec       	ldi	r19, 0xC0	; 192
 5e6:	40 ec       	ldi	r20, 0xC0	; 192
 5e8:	5d e3       	ldi	r21, 0x3D	; 61
 5ea:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	50 e4       	ldi	r21, 0x40	; 64
 5f6:	0e 94 c6 03 	call	0x78c	; 0x78c <__addsf3>
 5fa:	0e 94 32 04 	call	0x864	; 0x864 <__fixunssfsi>
 5fe:	86 2f       	mov	r24, r22
 600:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
			updateDutyCycle2b(dutyCycle4); // Actualizar PWM
 604:	0e 94 6f 00 	call	0xde	; 0xde <updateDutyCycle2b>
			break;
 608:	02 c0       	rjmp	.+4      	; 0x60e <__vector_21+0x182>
			
			case 5:
			POT=0;
 60a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <POT>
			
			default:
			break;
		}
	}
	ADCSRA |= (1 << ADSC);	//Iniciar nueva conversión
 60e:	ea e7       	ldi	r30, 0x7A	; 122
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	80 64       	ori	r24, 0x40	; 64
 616:	80 83       	st	Z, r24
}
 618:	ff 91       	pop	r31
 61a:	ef 91       	pop	r30
 61c:	bf 91       	pop	r27
 61e:	af 91       	pop	r26
 620:	9f 91       	pop	r25
 622:	8f 91       	pop	r24
 624:	7f 91       	pop	r23
 626:	6f 91       	pop	r22
 628:	5f 91       	pop	r21
 62a:	4f 91       	pop	r20
 62c:	3f 91       	pop	r19
 62e:	2f 91       	pop	r18
 630:	0f 90       	pop	r0
 632:	0f be       	out	0x3f, r0	; 63
 634:	0f 90       	pop	r0
 636:	1f 90       	pop	r1
 638:	18 95       	reti

0000063a <__vector_4>:
	


ISR(PCINT1_vect) {
 63a:	1f 92       	push	r1
 63c:	0f 92       	push	r0
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	0f 92       	push	r0
 642:	11 24       	eor	r1, r1
 644:	8f 93       	push	r24
 646:	9f 93       	push	r25
	//Leer estado actua de los botones
	uint8_t	estado_actual_C=PINC;
 648:	86 b1       	in	r24, 0x06	; 6

	
	
	//Detectar flanco para el botón de modo
	if (!(estado_actual_C & (1<<PINC3))){
 64a:	83 fd       	sbrc	r24, 3
 64c:	05 c0       	rjmp	.+10     	; 0x658 <__vector_4+0x1e>
		contador++;
 64e:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <contador>
 652:	9f 5f       	subi	r25, 0xFF	; 255
 654:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <contador>
	}
	switch (contador){
 658:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <contador>
 65c:	92 30       	cpi	r25, 0x02	; 2
 65e:	69 f0       	breq	.+26     	; 0x67a <__vector_4+0x40>
 660:	18 f4       	brcc	.+6      	; 0x668 <__vector_4+0x2e>
 662:	91 30       	cpi	r25, 0x01	; 1
 664:	31 f0       	breq	.+12     	; 0x672 <__vector_4+0x38>
 666:	14 c0       	rjmp	.+40     	; 0x690 <__vector_4+0x56>
 668:	93 30       	cpi	r25, 0x03	; 3
 66a:	59 f0       	breq	.+22     	; 0x682 <__vector_4+0x48>
 66c:	94 30       	cpi	r25, 0x04	; 4
 66e:	69 f0       	breq	.+26     	; 0x68a <__vector_4+0x50>
 670:	0f c0       	rjmp	.+30     	; 0x690 <__vector_4+0x56>
		case 1:
			MODO=0b00000001;	//Activar la bandra del modo 1: Manual
 672:	91 e0       	ldi	r25, 0x01	; 1
 674:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <MODO>
			break;
 678:	0b c0       	rjmp	.+22     	; 0x690 <__vector_4+0x56>
			
		case 2:
			MODO=0b00000010;	// Modo 2: Guardar posiciones en la EEPROM
 67a:	92 e0       	ldi	r25, 0x02	; 2
 67c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <MODO>
			break;
 680:	07 c0       	rjmp	.+14     	; 0x690 <__vector_4+0x56>
			
		case 3:
			MODO=0b00000100;	//Modo 3: leer datos de la EEPROM
 682:	94 e0       	ldi	r25, 0x04	; 4
 684:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <MODO>
			break;
 688:	03 c0       	rjmp	.+6      	; 0x690 <__vector_4+0x56>
			
		case 4:
			contador=1;
 68a:	91 e0       	ldi	r25, 0x01	; 1
 68c:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <contador>
		
	}
	
	//Botón 2 (guardar posiciones) para el modo 1
	//Leer primera posición para el modo 2
	if (!(estado_actual_C & (1<<PINC2))){
 690:	82 fd       	sbrc	r24, 2
 692:	03 c0       	rjmp	.+6      	; 0x69a <__vector_4+0x60>
		indicador_acb=0b00000001;
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <indicador_acb>
	}

	
	//Leer segunda posición para el modo 2
	if (!(estado_actual_C & (1<<PINC1))){
 69a:	81 fd       	sbrc	r24, 1
 69c:	03 c0       	rjmp	.+6      	; 0x6a4 <__vector_4+0x6a>
		indicador_acb=0b00000010;
 69e:	92 e0       	ldi	r25, 0x02	; 2
 6a0:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <indicador_acb>
	}
	
	
	//Leer tercera posición para el modo 2
	if (!(estado_actual_C & (1<<PINC0))){
 6a4:	80 fd       	sbrc	r24, 0
 6a6:	03 c0       	rjmp	.+6      	; 0x6ae <__vector_4+0x74>
		indicador_acb=0b00000100;
 6a8:	84 e0       	ldi	r24, 0x04	; 4
 6aa:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <indicador_acb>
	}
	
	
}
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	0f 90       	pop	r0
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	0f 90       	pop	r0
 6b8:	1f 90       	pop	r1
 6ba:	18 95       	reti

000006bc <__vector_18>:
	if (!(PINB & (1 << PINB4))){
		indicador_acb=0b00001000;
	}
}*/

ISR(USART_RX_vect){
 6bc:	1f 92       	push	r1
 6be:	0f 92       	push	r0
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	0f 92       	push	r0
 6c4:	11 24       	eor	r1, r1
 6c6:	2f 93       	push	r18
 6c8:	3f 93       	push	r19
 6ca:	4f 93       	push	r20
 6cc:	5f 93       	push	r21
 6ce:	6f 93       	push	r22
 6d0:	7f 93       	push	r23
 6d2:	8f 93       	push	r24
 6d4:	9f 93       	push	r25
 6d6:	af 93       	push	r26
 6d8:	bf 93       	push	r27
 6da:	ef 93       	push	r30
 6dc:	ff 93       	push	r31
	char caracter=UDR0;
 6de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	switch(caracter){
 6e2:	81 33       	cpi	r24, 0x31	; 49
 6e4:	41 f0       	breq	.+16     	; 0x6f6 <__vector_18+0x3a>
 6e6:	82 33       	cpi	r24, 0x32	; 50
 6e8:	51 f0       	breq	.+20     	; 0x6fe <__vector_18+0x42>
 6ea:	80 33       	cpi	r24, 0x30	; 48
 6ec:	59 f4       	brne	.+22     	; 0x704 <__vector_18+0x48>
		case '0':
			MODO=0b00000001;
 6ee:	91 e0       	ldi	r25, 0x01	; 1
 6f0:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <MODO>
			break;
 6f4:	07 c0       	rjmp	.+14     	; 0x704 <__vector_18+0x48>
			
		case '1':
			MODO=0b00000010;
 6f6:	92 e0       	ldi	r25, 0x02	; 2
 6f8:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <MODO>
			break;
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <__vector_18+0x48>
			
		case '2':
			MODO=0b00000100;
 6fe:	94 e0       	ldi	r25, 0x04	; 4
 700:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <MODO>
			
		default:
			break;
	}
	
	writeChar(caracter);
 704:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeChar>
	}
 708:	ff 91       	pop	r31
 70a:	ef 91       	pop	r30
 70c:	bf 91       	pop	r27
 70e:	af 91       	pop	r26
 710:	9f 91       	pop	r25
 712:	8f 91       	pop	r24
 714:	7f 91       	pop	r23
 716:	6f 91       	pop	r22
 718:	5f 91       	pop	r21
 71a:	4f 91       	pop	r20
 71c:	3f 91       	pop	r19
 71e:	2f 91       	pop	r18
 720:	0f 90       	pop	r0
 722:	0f be       	out	0x3f, r0	; 63
 724:	0f 90       	pop	r0
 726:	1f 90       	pop	r1
 728:	18 95       	reti

0000072a <initPWM1A>:
#include <avr/io.h>
#include "PWM1.h"

void initPWM1A(){
	
	DDRB |= (1 << DDB1);	//Setear bit 1 del puerto B como salida
 72a:	84 b1       	in	r24, 0x04	; 4
 72c:	82 60       	ori	r24, 0x02	; 2
 72e:	84 b9       	out	0x04, r24	; 4
	
	//CONFIGURACIÓN DEL TIMER 1 PARA FAST PWM CON OCR1A COMO TOP
	TCCR1A = 0;
 730:	e0 e8       	ldi	r30, 0x80	; 128
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	10 82       	st	Z, r1
	TCCR1A |= (1 << COM1A1);	//no invertido
 736:	80 81       	ld	r24, Z
 738:	80 68       	ori	r24, 0x80	; 128
 73a:	80 83       	st	Z, r24
	
	//Modo fast PMW y top->OCR1A (MODO 14)
	TCCR1A |= (1 << WGM11);
 73c:	80 81       	ld	r24, Z
 73e:	82 60       	ori	r24, 0x02	; 2
 740:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 742:	e1 e8       	ldi	r30, 0x81	; 129
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	88 61       	ori	r24, 0x18	; 24
 74a:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);	//Prescaler de 8
 74c:	80 81       	ld	r24, Z
 74e:	82 60       	ori	r24, 0x02	; 2
 750:	80 83       	st	Z, r24
	ICR1 = 2499;	//TOP
 752:	83 ec       	ldi	r24, 0xC3	; 195
 754:	99 e0       	ldi	r25, 0x09	; 9
 756:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 75a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 75e:	08 95       	ret

00000760 <updateDutyCycle1>:
	
}

void  updateDutyCycle1(uint8_t duty){
	OCR1A = duty;
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 766:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 76a:	08 95       	ret

0000076c <initPWM1B>:
#include <avr/io.h>
#include "PWM1B.h"

void initPWM1B(){
	
	DDRB |= (1 << DDB2);	//Setear bit 2 del puerto B como salida
 76c:	84 b1       	in	r24, 0x04	; 4
 76e:	84 60       	ori	r24, 0x04	; 4
 770:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << COM1B1);	//no invertido	
 772:	e0 e8       	ldi	r30, 0x80	; 128
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	80 62       	ori	r24, 0x20	; 32
 77a:	80 83       	st	Z, r24
 77c:	08 95       	ret

0000077e <updateDutyCycle1B>:
}

void  updateDutyCycle1B(uint8_t duty){
	OCR1B = duty;
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 784:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 788:	08 95       	ret

0000078a <__subsf3>:
 78a:	50 58       	subi	r21, 0x80	; 128

0000078c <__addsf3>:
 78c:	bb 27       	eor	r27, r27
 78e:	aa 27       	eor	r26, r26
 790:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__addsf3x>
 794:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__fp_round>
 798:	0e 94 a7 04 	call	0x94e	; 0x94e <__fp_pscA>
 79c:	38 f0       	brcs	.+14     	; 0x7ac <__addsf3+0x20>
 79e:	0e 94 ae 04 	call	0x95c	; 0x95c <__fp_pscB>
 7a2:	20 f0       	brcs	.+8      	; 0x7ac <__addsf3+0x20>
 7a4:	39 f4       	brne	.+14     	; 0x7b4 <__addsf3+0x28>
 7a6:	9f 3f       	cpi	r25, 0xFF	; 255
 7a8:	19 f4       	brne	.+6      	; 0x7b0 <__addsf3+0x24>
 7aa:	26 f4       	brtc	.+8      	; 0x7b4 <__addsf3+0x28>
 7ac:	0c 94 a4 04 	jmp	0x948	; 0x948 <__fp_nan>
 7b0:	0e f4       	brtc	.+2      	; 0x7b4 <__addsf3+0x28>
 7b2:	e0 95       	com	r30
 7b4:	e7 fb       	bst	r30, 7
 7b6:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_inf>

000007ba <__addsf3x>:
 7ba:	e9 2f       	mov	r30, r25
 7bc:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_split3>
 7c0:	58 f3       	brcs	.-42     	; 0x798 <__addsf3+0xc>
 7c2:	ba 17       	cp	r27, r26
 7c4:	62 07       	cpc	r22, r18
 7c6:	73 07       	cpc	r23, r19
 7c8:	84 07       	cpc	r24, r20
 7ca:	95 07       	cpc	r25, r21
 7cc:	20 f0       	brcs	.+8      	; 0x7d6 <__addsf3x+0x1c>
 7ce:	79 f4       	brne	.+30     	; 0x7ee <__addsf3x+0x34>
 7d0:	a6 f5       	brtc	.+104    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 7d2:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__fp_zero>
 7d6:	0e f4       	brtc	.+2      	; 0x7da <__addsf3x+0x20>
 7d8:	e0 95       	com	r30
 7da:	0b 2e       	mov	r0, r27
 7dc:	ba 2f       	mov	r27, r26
 7de:	a0 2d       	mov	r26, r0
 7e0:	0b 01       	movw	r0, r22
 7e2:	b9 01       	movw	r22, r18
 7e4:	90 01       	movw	r18, r0
 7e6:	0c 01       	movw	r0, r24
 7e8:	ca 01       	movw	r24, r20
 7ea:	a0 01       	movw	r20, r0
 7ec:	11 24       	eor	r1, r1
 7ee:	ff 27       	eor	r31, r31
 7f0:	59 1b       	sub	r21, r25
 7f2:	99 f0       	breq	.+38     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7f4:	59 3f       	cpi	r21, 0xF9	; 249
 7f6:	50 f4       	brcc	.+20     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7f8:	50 3e       	cpi	r21, 0xE0	; 224
 7fa:	68 f1       	brcs	.+90     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 7fc:	1a 16       	cp	r1, r26
 7fe:	f0 40       	sbci	r31, 0x00	; 0
 800:	a2 2f       	mov	r26, r18
 802:	23 2f       	mov	r18, r19
 804:	34 2f       	mov	r19, r20
 806:	44 27       	eor	r20, r20
 808:	58 5f       	subi	r21, 0xF8	; 248
 80a:	f3 cf       	rjmp	.-26     	; 0x7f2 <__addsf3x+0x38>
 80c:	46 95       	lsr	r20
 80e:	37 95       	ror	r19
 810:	27 95       	ror	r18
 812:	a7 95       	ror	r26
 814:	f0 40       	sbci	r31, 0x00	; 0
 816:	53 95       	inc	r21
 818:	c9 f7       	brne	.-14     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 81a:	7e f4       	brtc	.+30     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 81c:	1f 16       	cp	r1, r31
 81e:	ba 0b       	sbc	r27, r26
 820:	62 0b       	sbc	r22, r18
 822:	73 0b       	sbc	r23, r19
 824:	84 0b       	sbc	r24, r20
 826:	ba f0       	brmi	.+46     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 828:	91 50       	subi	r25, 0x01	; 1
 82a:	a1 f0       	breq	.+40     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 82c:	ff 0f       	add	r31, r31
 82e:	bb 1f       	adc	r27, r27
 830:	66 1f       	adc	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	c2 f7       	brpl	.-16     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 838:	0e c0       	rjmp	.+28     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 83a:	ba 0f       	add	r27, r26
 83c:	62 1f       	adc	r22, r18
 83e:	73 1f       	adc	r23, r19
 840:	84 1f       	adc	r24, r20
 842:	48 f4       	brcc	.+18     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 844:	87 95       	ror	r24
 846:	77 95       	ror	r23
 848:	67 95       	ror	r22
 84a:	b7 95       	ror	r27
 84c:	f7 95       	ror	r31
 84e:	9e 3f       	cpi	r25, 0xFE	; 254
 850:	08 f0       	brcs	.+2      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 852:	b0 cf       	rjmp	.-160    	; 0x7b4 <__addsf3+0x28>
 854:	93 95       	inc	r25
 856:	88 0f       	add	r24, r24
 858:	08 f0       	brcs	.+2      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 85a:	99 27       	eor	r25, r25
 85c:	ee 0f       	add	r30, r30
 85e:	97 95       	ror	r25
 860:	87 95       	ror	r24
 862:	08 95       	ret

00000864 <__fixunssfsi>:
 864:	0e 94 ce 04 	call	0x99c	; 0x99c <__fp_splitA>
 868:	88 f0       	brcs	.+34     	; 0x88c <__fixunssfsi+0x28>
 86a:	9f 57       	subi	r25, 0x7F	; 127
 86c:	98 f0       	brcs	.+38     	; 0x894 <__fixunssfsi+0x30>
 86e:	b9 2f       	mov	r27, r25
 870:	99 27       	eor	r25, r25
 872:	b7 51       	subi	r27, 0x17	; 23
 874:	b0 f0       	brcs	.+44     	; 0x8a2 <__fixunssfsi+0x3e>
 876:	e1 f0       	breq	.+56     	; 0x8b0 <__fixunssfsi+0x4c>
 878:	66 0f       	add	r22, r22
 87a:	77 1f       	adc	r23, r23
 87c:	88 1f       	adc	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	1a f0       	brmi	.+6      	; 0x888 <__fixunssfsi+0x24>
 882:	ba 95       	dec	r27
 884:	c9 f7       	brne	.-14     	; 0x878 <__fixunssfsi+0x14>
 886:	14 c0       	rjmp	.+40     	; 0x8b0 <__fixunssfsi+0x4c>
 888:	b1 30       	cpi	r27, 0x01	; 1
 88a:	91 f0       	breq	.+36     	; 0x8b0 <__fixunssfsi+0x4c>
 88c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fp_zero>
 890:	b1 e0       	ldi	r27, 0x01	; 1
 892:	08 95       	ret
 894:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__fp_zero>
 898:	67 2f       	mov	r22, r23
 89a:	78 2f       	mov	r23, r24
 89c:	88 27       	eor	r24, r24
 89e:	b8 5f       	subi	r27, 0xF8	; 248
 8a0:	39 f0       	breq	.+14     	; 0x8b0 <__fixunssfsi+0x4c>
 8a2:	b9 3f       	cpi	r27, 0xF9	; 249
 8a4:	cc f3       	brlt	.-14     	; 0x898 <__fixunssfsi+0x34>
 8a6:	86 95       	lsr	r24
 8a8:	77 95       	ror	r23
 8aa:	67 95       	ror	r22
 8ac:	b3 95       	inc	r27
 8ae:	d9 f7       	brne	.-10     	; 0x8a6 <__fixunssfsi+0x42>
 8b0:	3e f4       	brtc	.+14     	; 0x8c0 <__fixunssfsi+0x5c>
 8b2:	90 95       	com	r25
 8b4:	80 95       	com	r24
 8b6:	70 95       	com	r23
 8b8:	61 95       	neg	r22
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	8f 4f       	sbci	r24, 0xFF	; 255
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	08 95       	ret

000008c2 <__floatunsisf>:
 8c2:	e8 94       	clt
 8c4:	09 c0       	rjmp	.+18     	; 0x8d8 <__floatsisf+0x12>

000008c6 <__floatsisf>:
 8c6:	97 fb       	bst	r25, 7
 8c8:	3e f4       	brtc	.+14     	; 0x8d8 <__floatsisf+0x12>
 8ca:	90 95       	com	r25
 8cc:	80 95       	com	r24
 8ce:	70 95       	com	r23
 8d0:	61 95       	neg	r22
 8d2:	7f 4f       	sbci	r23, 0xFF	; 255
 8d4:	8f 4f       	sbci	r24, 0xFF	; 255
 8d6:	9f 4f       	sbci	r25, 0xFF	; 255
 8d8:	99 23       	and	r25, r25
 8da:	a9 f0       	breq	.+42     	; 0x906 <__stack+0x7>
 8dc:	f9 2f       	mov	r31, r25
 8de:	96 e9       	ldi	r25, 0x96	; 150
 8e0:	bb 27       	eor	r27, r27
 8e2:	93 95       	inc	r25
 8e4:	f6 95       	lsr	r31
 8e6:	87 95       	ror	r24
 8e8:	77 95       	ror	r23
 8ea:	67 95       	ror	r22
 8ec:	b7 95       	ror	r27
 8ee:	f1 11       	cpse	r31, r1
 8f0:	f8 cf       	rjmp	.-16     	; 0x8e2 <__floatsisf+0x1c>
 8f2:	fa f4       	brpl	.+62     	; 0x932 <__stack+0x33>
 8f4:	bb 0f       	add	r27, r27
 8f6:	11 f4       	brne	.+4      	; 0x8fc <__floatsisf+0x36>
 8f8:	60 ff       	sbrs	r22, 0
 8fa:	1b c0       	rjmp	.+54     	; 0x932 <__stack+0x33>
 8fc:	6f 5f       	subi	r22, 0xFF	; 255
 8fe:	7f 4f       	sbci	r23, 0xFF	; 255
 900:	8f 4f       	sbci	r24, 0xFF	; 255
 902:	9f 4f       	sbci	r25, 0xFF	; 255
 904:	16 c0       	rjmp	.+44     	; 0x932 <__stack+0x33>
 906:	88 23       	and	r24, r24
 908:	11 f0       	breq	.+4      	; 0x90e <__stack+0xf>
 90a:	96 e9       	ldi	r25, 0x96	; 150
 90c:	11 c0       	rjmp	.+34     	; 0x930 <__stack+0x31>
 90e:	77 23       	and	r23, r23
 910:	21 f0       	breq	.+8      	; 0x91a <__stack+0x1b>
 912:	9e e8       	ldi	r25, 0x8E	; 142
 914:	87 2f       	mov	r24, r23
 916:	76 2f       	mov	r23, r22
 918:	05 c0       	rjmp	.+10     	; 0x924 <__stack+0x25>
 91a:	66 23       	and	r22, r22
 91c:	71 f0       	breq	.+28     	; 0x93a <__stack+0x3b>
 91e:	96 e8       	ldi	r25, 0x86	; 134
 920:	86 2f       	mov	r24, r22
 922:	70 e0       	ldi	r23, 0x00	; 0
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	2a f0       	brmi	.+10     	; 0x932 <__stack+0x33>
 928:	9a 95       	dec	r25
 92a:	66 0f       	add	r22, r22
 92c:	77 1f       	adc	r23, r23
 92e:	88 1f       	adc	r24, r24
 930:	da f7       	brpl	.-10     	; 0x928 <__stack+0x29>
 932:	88 0f       	add	r24, r24
 934:	96 95       	lsr	r25
 936:	87 95       	ror	r24
 938:	97 f9       	bld	r25, 7
 93a:	08 95       	ret

0000093c <__fp_inf>:
 93c:	97 f9       	bld	r25, 7
 93e:	9f 67       	ori	r25, 0x7F	; 127
 940:	80 e8       	ldi	r24, 0x80	; 128
 942:	70 e0       	ldi	r23, 0x00	; 0
 944:	60 e0       	ldi	r22, 0x00	; 0
 946:	08 95       	ret

00000948 <__fp_nan>:
 948:	9f ef       	ldi	r25, 0xFF	; 255
 94a:	80 ec       	ldi	r24, 0xC0	; 192
 94c:	08 95       	ret

0000094e <__fp_pscA>:
 94e:	00 24       	eor	r0, r0
 950:	0a 94       	dec	r0
 952:	16 16       	cp	r1, r22
 954:	17 06       	cpc	r1, r23
 956:	18 06       	cpc	r1, r24
 958:	09 06       	cpc	r0, r25
 95a:	08 95       	ret

0000095c <__fp_pscB>:
 95c:	00 24       	eor	r0, r0
 95e:	0a 94       	dec	r0
 960:	12 16       	cp	r1, r18
 962:	13 06       	cpc	r1, r19
 964:	14 06       	cpc	r1, r20
 966:	05 06       	cpc	r0, r21
 968:	08 95       	ret

0000096a <__fp_round>:
 96a:	09 2e       	mov	r0, r25
 96c:	03 94       	inc	r0
 96e:	00 0c       	add	r0, r0
 970:	11 f4       	brne	.+4      	; 0x976 <__fp_round+0xc>
 972:	88 23       	and	r24, r24
 974:	52 f0       	brmi	.+20     	; 0x98a <__fp_round+0x20>
 976:	bb 0f       	add	r27, r27
 978:	40 f4       	brcc	.+16     	; 0x98a <__fp_round+0x20>
 97a:	bf 2b       	or	r27, r31
 97c:	11 f4       	brne	.+4      	; 0x982 <__fp_round+0x18>
 97e:	60 ff       	sbrs	r22, 0
 980:	04 c0       	rjmp	.+8      	; 0x98a <__fp_round+0x20>
 982:	6f 5f       	subi	r22, 0xFF	; 255
 984:	7f 4f       	sbci	r23, 0xFF	; 255
 986:	8f 4f       	sbci	r24, 0xFF	; 255
 988:	9f 4f       	sbci	r25, 0xFF	; 255
 98a:	08 95       	ret

0000098c <__fp_split3>:
 98c:	57 fd       	sbrc	r21, 7
 98e:	90 58       	subi	r25, 0x80	; 128
 990:	44 0f       	add	r20, r20
 992:	55 1f       	adc	r21, r21
 994:	59 f0       	breq	.+22     	; 0x9ac <__fp_splitA+0x10>
 996:	5f 3f       	cpi	r21, 0xFF	; 255
 998:	71 f0       	breq	.+28     	; 0x9b6 <__fp_splitA+0x1a>
 99a:	47 95       	ror	r20

0000099c <__fp_splitA>:
 99c:	88 0f       	add	r24, r24
 99e:	97 fb       	bst	r25, 7
 9a0:	99 1f       	adc	r25, r25
 9a2:	61 f0       	breq	.+24     	; 0x9bc <__fp_splitA+0x20>
 9a4:	9f 3f       	cpi	r25, 0xFF	; 255
 9a6:	79 f0       	breq	.+30     	; 0x9c6 <__fp_splitA+0x2a>
 9a8:	87 95       	ror	r24
 9aa:	08 95       	ret
 9ac:	12 16       	cp	r1, r18
 9ae:	13 06       	cpc	r1, r19
 9b0:	14 06       	cpc	r1, r20
 9b2:	55 1f       	adc	r21, r21
 9b4:	f2 cf       	rjmp	.-28     	; 0x99a <__fp_split3+0xe>
 9b6:	46 95       	lsr	r20
 9b8:	f1 df       	rcall	.-30     	; 0x99c <__fp_splitA>
 9ba:	08 c0       	rjmp	.+16     	; 0x9cc <__fp_splitA+0x30>
 9bc:	16 16       	cp	r1, r22
 9be:	17 06       	cpc	r1, r23
 9c0:	18 06       	cpc	r1, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	f1 cf       	rjmp	.-30     	; 0x9a8 <__fp_splitA+0xc>
 9c6:	86 95       	lsr	r24
 9c8:	71 05       	cpc	r23, r1
 9ca:	61 05       	cpc	r22, r1
 9cc:	08 94       	sec
 9ce:	08 95       	ret

000009d0 <__fp_zero>:
 9d0:	e8 94       	clt

000009d2 <__fp_szero>:
 9d2:	bb 27       	eor	r27, r27
 9d4:	66 27       	eor	r22, r22
 9d6:	77 27       	eor	r23, r23
 9d8:	cb 01       	movw	r24, r22
 9da:	97 f9       	bld	r25, 7
 9dc:	08 95       	ret

000009de <__mulsf3>:
 9de:	0e 94 02 05 	call	0xa04	; 0xa04 <__mulsf3x>
 9e2:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__fp_round>
 9e6:	0e 94 a7 04 	call	0x94e	; 0x94e <__fp_pscA>
 9ea:	38 f0       	brcs	.+14     	; 0x9fa <__mulsf3+0x1c>
 9ec:	0e 94 ae 04 	call	0x95c	; 0x95c <__fp_pscB>
 9f0:	20 f0       	brcs	.+8      	; 0x9fa <__mulsf3+0x1c>
 9f2:	95 23       	and	r25, r21
 9f4:	11 f0       	breq	.+4      	; 0x9fa <__mulsf3+0x1c>
 9f6:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_inf>
 9fa:	0c 94 a4 04 	jmp	0x948	; 0x948 <__fp_nan>
 9fe:	11 24       	eor	r1, r1
 a00:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_szero>

00000a04 <__mulsf3x>:
 a04:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_split3>
 a08:	70 f3       	brcs	.-36     	; 0x9e6 <__mulsf3+0x8>

00000a0a <__mulsf3_pse>:
 a0a:	95 9f       	mul	r25, r21
 a0c:	c1 f3       	breq	.-16     	; 0x9fe <__mulsf3+0x20>
 a0e:	95 0f       	add	r25, r21
 a10:	50 e0       	ldi	r21, 0x00	; 0
 a12:	55 1f       	adc	r21, r21
 a14:	62 9f       	mul	r22, r18
 a16:	f0 01       	movw	r30, r0
 a18:	72 9f       	mul	r23, r18
 a1a:	bb 27       	eor	r27, r27
 a1c:	f0 0d       	add	r31, r0
 a1e:	b1 1d       	adc	r27, r1
 a20:	63 9f       	mul	r22, r19
 a22:	aa 27       	eor	r26, r26
 a24:	f0 0d       	add	r31, r0
 a26:	b1 1d       	adc	r27, r1
 a28:	aa 1f       	adc	r26, r26
 a2a:	64 9f       	mul	r22, r20
 a2c:	66 27       	eor	r22, r22
 a2e:	b0 0d       	add	r27, r0
 a30:	a1 1d       	adc	r26, r1
 a32:	66 1f       	adc	r22, r22
 a34:	82 9f       	mul	r24, r18
 a36:	22 27       	eor	r18, r18
 a38:	b0 0d       	add	r27, r0
 a3a:	a1 1d       	adc	r26, r1
 a3c:	62 1f       	adc	r22, r18
 a3e:	73 9f       	mul	r23, r19
 a40:	b0 0d       	add	r27, r0
 a42:	a1 1d       	adc	r26, r1
 a44:	62 1f       	adc	r22, r18
 a46:	83 9f       	mul	r24, r19
 a48:	a0 0d       	add	r26, r0
 a4a:	61 1d       	adc	r22, r1
 a4c:	22 1f       	adc	r18, r18
 a4e:	74 9f       	mul	r23, r20
 a50:	33 27       	eor	r19, r19
 a52:	a0 0d       	add	r26, r0
 a54:	61 1d       	adc	r22, r1
 a56:	23 1f       	adc	r18, r19
 a58:	84 9f       	mul	r24, r20
 a5a:	60 0d       	add	r22, r0
 a5c:	21 1d       	adc	r18, r1
 a5e:	82 2f       	mov	r24, r18
 a60:	76 2f       	mov	r23, r22
 a62:	6a 2f       	mov	r22, r26
 a64:	11 24       	eor	r1, r1
 a66:	9f 57       	subi	r25, 0x7F	; 127
 a68:	50 40       	sbci	r21, 0x00	; 0
 a6a:	9a f0       	brmi	.+38     	; 0xa92 <__mulsf3_pse+0x88>
 a6c:	f1 f0       	breq	.+60     	; 0xaaa <__mulsf3_pse+0xa0>
 a6e:	88 23       	and	r24, r24
 a70:	4a f0       	brmi	.+18     	; 0xa84 <__mulsf3_pse+0x7a>
 a72:	ee 0f       	add	r30, r30
 a74:	ff 1f       	adc	r31, r31
 a76:	bb 1f       	adc	r27, r27
 a78:	66 1f       	adc	r22, r22
 a7a:	77 1f       	adc	r23, r23
 a7c:	88 1f       	adc	r24, r24
 a7e:	91 50       	subi	r25, 0x01	; 1
 a80:	50 40       	sbci	r21, 0x00	; 0
 a82:	a9 f7       	brne	.-22     	; 0xa6e <__mulsf3_pse+0x64>
 a84:	9e 3f       	cpi	r25, 0xFE	; 254
 a86:	51 05       	cpc	r21, r1
 a88:	80 f0       	brcs	.+32     	; 0xaaa <__mulsf3_pse+0xa0>
 a8a:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_inf>
 a8e:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_szero>
 a92:	5f 3f       	cpi	r21, 0xFF	; 255
 a94:	e4 f3       	brlt	.-8      	; 0xa8e <__mulsf3_pse+0x84>
 a96:	98 3e       	cpi	r25, 0xE8	; 232
 a98:	d4 f3       	brlt	.-12     	; 0xa8e <__mulsf3_pse+0x84>
 a9a:	86 95       	lsr	r24
 a9c:	77 95       	ror	r23
 a9e:	67 95       	ror	r22
 aa0:	b7 95       	ror	r27
 aa2:	f7 95       	ror	r31
 aa4:	e7 95       	ror	r30
 aa6:	9f 5f       	subi	r25, 0xFF	; 255
 aa8:	c1 f7       	brne	.-16     	; 0xa9a <__mulsf3_pse+0x90>
 aaa:	fe 2b       	or	r31, r30
 aac:	88 0f       	add	r24, r24
 aae:	91 1d       	adc	r25, r1
 ab0:	96 95       	lsr	r25
 ab2:	87 95       	ror	r24
 ab4:	97 f9       	bld	r25, 7
 ab6:	08 95       	ret

00000ab8 <_exit>:
 ab8:	f8 94       	cli

00000aba <__stop_program>:
 aba:	ff cf       	rjmp	.-2      	; 0xaba <__stop_program>
